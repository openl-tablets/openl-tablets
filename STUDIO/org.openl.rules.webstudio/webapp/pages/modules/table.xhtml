<ui:composition
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:fn="http://java.sun.com/jsp/jstl/functions"
    xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich"
    xmlns:rules="http://openl-tablets.sourceforge.net/jsf">

    <c:set var="contextPath" value="#{facesContext.externalContext.request.contextPath}" />

    <style>
        #content {
            overflow: hidden;
        }

        #tableToolbarPanel {
            padding-top: 1px;
            border-bottom: 1px solid #eaeaea;
            height: 55px;
            min-width: 1000px;
        }

        #tablePanel {
            overflow: auto;
            position: absolute;
            top: 57px;
            bottom: 0;
            left: 0;
            right: 0;
        }

        /* TODO Create Button plugin */
        .toolbarButton {
            position: relative;
            display: inline-block;
            text-decoration: none;
            color: #313131;
            padding: 5px 8px;
            text-align: center;
            margin: 0 2px;
        }
        .toolbarButton:hover {
            color: #000;
            background: #f5f5f5;
        }
        .toolbarButton > img {
            vertical-align: top;
        }
        .toolbarButton > div {
            margin-top: 3px;
        }
        .toolbarButton .arrow {
            background: url('webresource/images/arrow_down.png') no-repeat center;
            padding: 2px 3px;
        }
        .toolbarButton .arrow:hover {
            background-color: #e3e3e3;
        }
        .menuButton {
            padding: 4px;
            margin: 0;
        }
        .menuButton table {
            border-collapse: collapse;
            text-align: center;
        }

        #testSelector, #inputArgsForm\:inputTestCasePanel {
            min-height: 50px;
            max-height: clamp(50px, 100vh - 470px, 50vh);
        }

        #runCasesSettings, #testSelector {
            border-bottom: 1px solid #eee;
            margin-bottom: 2px;
            padding: 8px 0;
            background: #fdfdfd;
            line-height: 1.5;
        }

        #runCasesSettings > div, #testSelector > div {
            padding: 4px 15px;
        }

        #runCasesSettings > div > span, #testSelector > div > span {
            display: inline-block;
            min-width: 110px;
        }

        .te_toolbar {
            width: 100% !important;
            padding: 5px 10px !important;
            -moz-box-sizing: border-box;
                 box-sizing: border-box;
        }

        #t_te_table {
            margin: 12px 11px;
        }

        .table-problems {
            margin: 9px 12px 12px 10px;
        }

        .table-problems > header {
            font-size: 12px;
            margin: 0px 2px 5px 2px;
        }

        .dropdown-additional-content-toggle:hover {
            background-color: #7777771c;
        }

        #targetTablesSection > div:nth-child(1) {
            display: none;
        }

        #testsSection > div:nth-child(1) {
            display: none;
        }

        #problems-messages-panel-id > table:nth-child(1) {
            display: none;
        }

        #problems-messages-panel-id {
            display: none;
        }

        .padding-top-3px {
            padding-top: 3px;
        }

        .dropdown-link:hover {
            background: #7777771c;
            text-decoration: none;
        }

        .dropdown-link {
            text-decoration: none;
            padding-bottom: 1px;
        }

        .dropdown-additional-content-toggle .caret::before {
            top: 0;
            display:none
        }

        .dropdown-additional-content-toggle .caret {
            margin-top: 5px;
        }

        .dropdown-additional-content-toggle {
            padding-left: 0px;
            padding-right: 4px;
            margin-left: -2px;
            border-radius: 4px;
            display:none;
        }

        .dropdown-additional-content {
            position: absolute;
            z-index: 9000;
            display: none;
            max-height: 150px;
            padding: 3px 4px 2px;
        }

        .tableTestPanelContainer {
            padding: 0 10px;
        }

        .stacktrace-links {
            cursor: pointer;
        }

        .dropdown-additional-content div {
            margin-bottom: 3px;
        }

        #targetTablesPanel {
            display: none;
        }

        .dropdown-header {
            font-weight: bold;
            color: #333333;
            margin-bottom: 2px;
        }

        .problems-message-table {
            margin-top: 3px;
        }

        .border-padding-0 {
            border: 0;
            padding: 0;
        }

        .summary-panels {
            display: inline;
        }

        .white-space-pre-wrap {
            white-space: pre-wrap;
        }

        .stacktrace-panels {
            display: none;
        }
    </style>

    <c:if test="#{!empty tableBean.table and !tableBean.dispatcherValidationNode}">

    <div id="unitsMenu" style="display: none; min-width: 300px">
        <c:set var="traceUrl" value="#{contextPath}/faces/pages/modules/traceView.xhtml" />
        <h:form prependId="false">
            <h:panelGroup id="runModuleOnlySetting" layout="block">
                <div style="margin: 10px 15px 0; white-space:nowrap;" title="Within Current Module Only">
                    <span style="margin-right: 10px">Within Current Module Only</span>
                    <input id="runTestModuleOnly" name="currentOpenedModule" type="checkbox"
                           value="true" style="vertical-align:-2px;margin:-4px"/>
                </div>
            </h:panelGroup>
            <h:panelGroup id="runCasesSettings" layout="block" rendered="#{tableBean.table.type != 'xls.run.method'}"
                          styleClass="hidden b-run b-test">
                <div title="Show only failed test cases">
                    <span>Failures Only</span>
                    <input name="failuresOnly" type="checkbox"
                           onclick="$j('#caseFailuresSetting').toggle(this.checked)"
                           value="true" checked="#{studio.testsFailuresOnly ? 'checked' : ''}"
                           style="vertical-align:-2px;margin:-4px" />
                </div>
                <div id="caseFailuresSetting" class="#{!studio.testsFailuresOnly ? 'hidden' : ''}">
                    <span>Failures per test</span>
                    <select id="failures" name="failures">
                        <c:set var="values" value="#{fn:split('1;5;20;-1', ';')}"/>
                        <ui:repeat value="#{values}" var="value" varStatus="i">
                            <option value="#{value}" selected="#{studio.testsFailuresPerTest == value ? 'selected':''}" >#{value == -1 ? "All" : value}</option>
                        </ui:repeat>
                    </select>
                </div>
                <div title="Display all executed test cases results including the ones for the tested values">
                    <span>Compound Result</span>
                    <input name="complexResult" type="checkbox"
                           value="true" checked="#{studio.showComplexResult ? 'checked' : ''}"
                           style="vertical-align:-2px;margin:-4px" />
                </div>
            </h:panelGroup>
            <h:panelGroup id="testSelector" layout="block" styleClass="hidden b-run b-benchmark b-trace scrollable">
                <c:if test="#{fn:length(tableBean.tests) gt 20}"><!-- Use range only for the huge tests -->
                    <input type="checkbox" id="useTestRanges" checked="checked" style="display: none"/>
                    <div id="testRangeSetting" title="Define ranges like: 2-4,7,10-12 or id3-id7">
                        <span>Range of IDs</span>
                        <input type="text" id="testRanges" value="#{tableBean.tests[0].id}"/>
                    </div>
                </c:if>

                <c:if test="#{fn:length(tableBean.tests) le 20}"><!-- Display checkbox only when the count of the tests not greater than 20 -->
                <div title="Define a range of IDs instead of checkboxes">
                    <span>Use the Range</span>
                    <input type="checkbox" id="useTestRanges"
                                             onclick="$j('#testRangeSetting').toggle(this.checked); $j('#testTable').toggle(!this.checked)"
                                             style="vertical-align:-2px;margin:-4px"/>
                </div>
                <div id="testRangeSetting" style="display:none;" title="Define ranges like: 2-4,7,10-12 or id3-id7">
                    <span>Range of IDs</span>
                    <input type="text" id="testRanges"/>
                </div>
            <table id="testTable" class="table" style="margin: 2px 2px 1px 2px; width: 98%;">
                <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="allTestCheck" onclick="changeAllItemStatus(this, 'testTable')" checked="checked" title="Check/Uncheck All"/>
                    </th>
                    <th>ID</th>
                    <th colspan="100">
                        #{tableBean.table.type == 'xls.run.method' ? 'Run Cases' : 'Test Cases'}
                    </th>
                </tr>
                </thead>
                <tbody>
                <ui:repeat var="test" value="#{tableBean.tests}">
                    <tr>
                        <td>
                            <input type="checkbox" class="test-id" value="#{test.id}" onclick="changeItemStatus(this, 'testTable', 'allTestCheck')" checked="checked"/>
                        </td>
                        <td>#{test.id}</td>
                        <ui:repeat var="inParam" value="#{tableBean.getTestCaseParams(test)}">
                            <td>
                                <ui:include src="/pages/modules/test/parameter.xhtml">
                                    <ui:param name="parameter" value="#{inParam}" />
                                    <ui:param name="lazy" value="true" />
                                    <ui:param name="requestId" value="#{mainBean.requestId}" />
                                </ui:include>
                            </td>
                        </ui:repeat>
                    </tr>
                </ui:repeat>
                </tbody>
            </table>
                </c:if>
            </h:panelGroup>
            <div style="padding: 6px 5px">
                <a4j:commandButton id="testButton" value="Test"
                                   rendered="#{tableBean.canRun}"
                                   title="Test" onclick="runTestCases();"
                                   styleClass="hidden on-errors-hide b-test"/>
                <a4j:commandButton id="runButton" value="Run"
                                   rendered="#{tableBean.canRun}"
                                   title="Run" onclick="return isAnyTestSelected();" oncomplete="runTestCases();"
                                   styleClass="hidden on-errors-hide b-run"/>
                <a4j:commandButton id="runToExcel"
                                   rendered="#{tableBean.canRun}"
                                   onclick="return isAnyTestSelected();" oncomplete="downloadTestCases();"
                                   value="Run into File" title="Run into File"
                                   styleClass="hidden on-errors-hide b-run"/>
                <a4j:commandButton id="testToExcel"
                                   rendered="#{tableBean.canRun}"
                                   onclick="return isAnyTestSelected();" oncomplete="downloadTestCases();"
                                   value="Test into File" title="Test into File"
                                   styleClass="hidden on-errors-hide b-test"/>
                <a4j:commandButton id="traceButton"
                                   rendered="#{tableBean.canRun}"
                                   value="Trace" title="Trace"
                                   styleClass="hidden on-errors-hide b-trace changes-listener"
                                   action="#{runTestHelper.initTrace}"
                                   oncomplete="open_win('#{traceUrl}', 'trace_win');ws.nav.reload();"
                                   onclick="return isAnyTestSelected(); "/>
                <!-- Don't use a4j:commandButton for file download -->
                <h:commandButton id="traceIntoFileButton" action="#{traceIntoFileBean.traceIntoFile}"
                                 rendered="#{tableBean.canRun}"
                                 value="Trace into File" onclick="return isAnyTestSelected();" title="Trace into File"
                                 styleClass="hidden on-errors-hide b-trace"/>
                <a4j:commandButton id="benchmarkButton" action="#{benchmarkBean.addLastBenchmark}"
                                   rendered="#{tableBean.canBenchmark}"
                                   value="Benchmark" title="Benchmark" onclick="return isAnyTestSelected();"
                                   oncomplete="ws.nav.go('#{studio.url('test/benchmark')}')"
                                   styleClass="hidden on-errors-hide b-benchmark"/>
            </div>
            <input type="hidden" name="testRanges" value="" id="testRangesHiddenInput"/>
            <input type="hidden" name="currentOpenedModule" value="" id="testModuleOnlyHiddenInput"/>
            <input type="hidden" name="id" value="#{tableBean.id}" />
        </h:form>
    </div>

    <div id="tableToolbarPanel">
        <input type="hidden" id="tableHasProblems" value="false" />
        <table>
            <tr>

                <!-- First Block -->
                <td>
                    <h:form>
                        <table>
                            <tr>
                                <td>
                                    <h:outputLink value="javascript:void(0)" title="Edit the table"
                                                  styleClass="toolbarButton"
                                                  onclick="editTable();"
                                                  rendered="#{tableBean.editable}">
                                        <img src="#{contextPath}/webresource/images/editTable.gif"/>
                                        <div>Edit</div>
                                    </h:outputLink>
                                </td>
                                <td>
                                    <h:outputLink value="#{contextPath}/action/launch" styleClass="toolbarButton"
                                        onclick="return onBeforeEdit();"
                                        rendered="#{tableBean.canOpenInExcel}"
                                        title="Open the table in Excel" target="hidden">
                                        <f:param name="id" value="#{tableBean.id}" />
                                        <img src="#{contextPath}/webresource/images/excel.png" />
                                        <div>Open</div>
                                    </h:outputLink>
                                </td>
                                <td>
                                    <a4j:commandLink rendered="#{tableBean.copyable}"
                                        onclick="return onBeforeEdit();"
                                        oncomplete="ws.nav.go('#{studio.url('copyTable')}?id=#{tableBean.id}')" title="Create a new table based on the existing one"
                                        styleClass="toolbarButton">
                                        <img src="#{contextPath}/webresource/images/copyTable.gif" />
                                        <div>Copy</div>
                                    </a4j:commandLink>
                                </td>
                                <td>
                                    <a4j:commandLink action="#{tableBean.removeTable}" title="Delete the table"
                                                     rendered="#{tableBean.editable}"
                                                     onclick="if (!onBeforeEdit()) return false; if (!confirm('Do you really want to remove this table?'))return false;"
                                                     oncomplete="ws.changes.revertChanges();ws.nav.go('#' + encodeURIComponent('#{studio.currentRepositoryId}') + '/' + encodeURIComponent('#{studio.currentModule.project.name}') + '/' + encodeURIComponent('#{studio.currentModule.name}'), true)"
                                                     styleClass="toolbarButton">
                                        <span class="delete-icon"/>
                                        <div>Remove</div>
                                    </a4j:commandLink>
                                </td>
                            </tr>
                        </table>
                    </h:form>
                </td>

                <c:if test="#{tableBean.testable}">

                <!-- Second Block -->
                <td class="on-errors-hide">

                    <h:form prependId="false">
                        <table>
                            <tr>
                                <td>
                                    <a4j:commandLink id="runLink" title="Run" styleClass="toolbarButton on-errors-hide menuButton"
                                        rendered="#{tableBean.canRun}"
                                        onclick="onRun(); return false;"
                                        onmouseover="$j(this).find('.arrow').css({'visibility':'visible'})"
                                        onmouseout="$j(this).find('.arrow').css({'visibility':'hidden'})"
                                        style="padding-right: 1px">
                                        <table>
                                            <tr>
                                                <td>
                                                    <img src="#{contextPath}/webresource/images/run.gif" />
                                                </td>
                                                <td rowspan="2" class="arrow"
                                                    onclick="onTestMenuOpen(event, 'b-run');return false;"
                                                    style="visibility: hidden;">
                                                    <f:verbatim>&amp;nbsp;&amp;nbsp;</f:verbatim>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <span>Run</span>
                                                </td>
                                            </tr>
                                        </table>
                                    </a4j:commandLink>
                                </td>
                                <td>
                                    <a4j:commandLink id="traceLink" title="Trace"
                                                     styleClass="toolbarButton on-errors-hide menuButton changes-listener"
                                                     rendered="#{tableBean.canRun}"
                                                     onclick="onTestMenuOpen(event, 'b-trace');return false;">
                                        <table>
                                            <tr>
                                                <td>
                                                    <img src="#{contextPath}/webresource/images/trace.gif" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <span>Trace</span>
                                                </td>
                                            </tr>
                                        </table>
                                    </a4j:commandLink>
                                </td>
                                <td>
                                    <a4j:commandLink id="benchmarkLink" title="Benchmark" styleClass="toolbarButton on-errors-hide menuButton"
                                        rendered="#{tableBean.canBenchmark}"
                                        onclick="onBenchmark(); return false;"
                                        onmouseover="$j(this).find('.arrow').css({'visibility':'visible'})"
                                        onmouseout="$j(this).find('.arrow').css({'visibility':'hidden'})"
                                        style="padding-right: 1px">
                                        <a4j:jsFunction name="onBenchmarkFunction" oncomplete="ws.nav.go('#{studio.url('test/benchmark')}');" action="#{benchmarkBean.addLastBenchmark}"/>
                                        <table>
                                            <tr>
                                                <td>
                                                    <img src="#{contextPath}/webresource/images/clock-icon.png" />
                                                </td>
                                                <td rowspan="2" class="arrow"
                                                    onclick="showUnitsMenu(event, 'b-benchmark');return false;"
                                                    style="visibility: hidden;">
                                                    <f:verbatim>&amp;nbsp;&amp;nbsp;</f:verbatim>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <span>Benchmark</span>
                                                </td>
                                            </tr>
                                        </table>
                                    </a4j:commandLink>
                                </td>
                            </tr>
                        </table>
                        <input type="hidden" name="currentOpenedModule" value="" id="testModuleHiddenInput"/>
                        <input type="hidden" name="id" value="#{tableBean.id}"/>
                    </h:form>
                </td>
                </c:if>

                <c:if test="#{tableBean.table.executable}">
                    <td>
                        <h:form id="inputArgsForm" onsubmit="return checkInput()">
                            <c:set var="runLink" value="#{studio.url('test/run')}?id=#{tableBean.id}" />
                            <c:set var="traceUrl" value="#{contextPath}/faces/pages/modules/traceView.xhtml" />
                            <c:set target="#{inputArgsBean}" property="uri" value="#{tableBean.uri}" />
                            <c:if test="#{inputArgsBean.methodHasParameters}">
                                <c:if test="#{tableBean.canRun}">
                                    <a class="toolbarButton on-errors-hide" title="Launch the table" href="javascript:void(0)"
                                        onclick="showButtonMenu(event, 'inputArgsMenu', 'a');$j('.manual-run').show();$j('.manual-trace').hide();">
                                        <img src="#{contextPath}/webresource/images/run.gif" />
                                        <div>Run</div>
                                    </a>
                                </c:if>
                                <c:if test="#{tableBean.canRun}">
                                    <a class="toolbarButton on-errors-hide" title="Launch the table and trace steps"
                                       href="javascript:void(0)"
                                       onclick=" showButtonMenu(event, 'inputArgsMenu', 'a');$j('.manual-trace').show();$j('.manual-run').hide();">
                                        <img src="#{contextPath}/webresource/images/trace.gif"/>
                                        <div>Trace</div>
                                    </a>
                                </c:if>
                                <div id="inputArgsMenu" style="display: none" >
                                    <h:panelGroup layout="block">
                                        <div style="margin: 10px" title="Within Current Module Only">
                                            <span style="margin-right: 10px">Within Current Module Only</span>
                                            <input id="runTestModuleOnlyInputArgs" name="currentOpenedModule" type="checkbox"
                                                   value="true" style="vertical-align:-2px;margin:-4px"/>
                                        </div>
                                        <div style="margin: 10px" title="Skip Empty Parameters">
                                            <span style="margin-right: 10px">Skip Empty Parameters</span>
                                            <input id="skipEmptyParametersInputArgs" name="skipEmptyParameters" type="checkbox"
                                                   value="true" style="vertical-align:-2px;margin:-4px"/>
                                        </div>
                                        <div style="margin: 10px" title="Flat Parameter Layout">
                                            <span style="margin-right: 10px">Flat Parameter Layout</span>
                                            <input id="flattenParametersInputArgs" name="flattenParameters" type="checkbox"
                                                   value="true" checked="checked" style="vertical-align:-2px;margin:-4px"/>
                                        </div>
                                        <div style="margin: 10px" title="Result in JSON format">
                                            <span style="margin-right: 10px">Result in JSON format</span>
                                            <input id="resultInJSONFormat" name="resultInJSONFormat" type="checkbox"
                                                   value="true" style="vertical-align:-2px;margin:-4px"/>
                                        </div>
                                    </h:panelGroup>
                                    <h:panelGroup id="inputTestCasePanelWrapper">
                                        <h:selectOneRadio id="inputTestCaseType"
                                                          value="#{inputArgsBean.inputTestCaseType}">
                                            <f:selectItem itemValue="BEAN" itemLabel="Tree Form"/>
                                            <f:selectItem itemValue="TEXT" itemLabel="JSON"/>
                                            <f:ajax listener="#{runTestHelper.fillBean}"
                                                    execute=":inputArgsForm:inputTestCasePanelWrapper"
                                                    onerror="onInputTestCaseTypeChange"
                                                    render=":inputArgsForm:inputTestCasePanelWrapper" />
                                        </h:selectOneRadio>
                                        <h:panelGroup id="inputTestCasePanel" layout="block"
                                                      styleClass="#{inputArgsBean.inputTestCaseType == 'TEXT'?'hidden':''} scrollable">
                                            <ui:include src="/pages/modules/test/inputTestCase.xhtml"/>
                                        </h:panelGroup>
                                        <h:panelGroup id="inputTestCaseText" layout="block"
                                                      styleClass="#{inputArgsBean.inputTestCaseType == 'BEAN'?'hidden':''}">
                                            <h:inputTextarea id="jsonInput" value="#{inputArgsBean.inputTextBean}"
                                                             placeholder="Input JSON here"
                                                             style="height:300px; width:500px">
                                            </h:inputTextarea>
                                        </h:panelGroup>
                                    </h:panelGroup>
                                    <div style="padding: 8px 5px 6px">
                                        <a4j:commandButton id="runButton" style="display: none" styleClass="manual-run"
                                            action="#{runTestHelper.catchParams}" value="Run" title="Launch the table"
                                            oncomplete="runManualTest();"/>
                                        <a4j:commandButton id="runToFileButton" style="display: none" styleClass="manual-run"
                                            value="Run into File" title="Run into File" onclick="moduleOnlyInputArgs()"
                                            action="#{runTestHelper.catchParamsToDownload}"
                                            oncomplete="downloadManualTest();"/>
                                        <a4j:commandButton id="traceButton" style="display: none"
                                            styleClass="changes-listener manual-trace"
                                            action="#{runTestHelper.initTrace}" onclick="moduleOnlyInputArgs()"
                                            oncomplete="open_win('#{traceUrl}', 'trace_win');ws.nav.reload();"
                                            value="Trace" title="Launch the table and trace steps"/>
                                        <h:commandButton id="traceIntoFileButton" style="display: none" styleClass="manual-trace"
                                            onclick="moduleOnlyInputArgs()" action="#{traceIntoFileBean.traceIntoFile}" value="Trace into File"
                                            title="Trace into File" />
                                    </div>
                                </div>
                            </c:if>
                            <c:if test="#{not inputArgsBean.methodHasParameters}">
                                <a4j:commandLink styleClass="toolbarButton on-errors-hide" title="Run"
                                    rendered="#{tableBean.canRun}"
                                    oncomplete="ws.nav.go('#{runLink}')">
                                    <img src="#{contextPath}/webresource/images/run.gif" />
                                    <div>Run</div>
                                    <a4j:param name="id" value="#{tableBean.id}"/>
                                </a4j:commandLink>
                                <a4j:commandLink action="#{runTestHelper.initTrace}"
                                                 styleClass="toolbarButton on-errors-hide changes-listener"
                                                 rendered="#{tableBean.canRun}"
                                                 oncomplete="open_win('#{traceUrl}', 'trace_win');ws.nav.reload();" title="Trace">
                                    <img src="#{contextPath}/webresource/images/trace.gif" />
                                    <div>Trace</div>
                                    <a4j:param name="id" value="#{tableBean.id}"/>
                                </a4j:commandLink>
                            </c:if>
                            <input type="hidden" name="id" value="#{tableBean.id}" />
                            <input type="hidden" name="currentOpenedModule" value="" id="testModuleOnlyInputArgs"/>
                        </h:form>
                    </td>
                </c:if>

                <c:if test="#{tableBean.hasTests}">
                    <td>
                        <c:set var="testLink" value="#{studio.url('test/test')}?id=#{tableBean.id}" />
                        <h:outputLink value="#{testLink}" title="Run Tests" styleClass="toolbarButton on-errors-hide menuButton"
                                      onmouseover="$j(this).find('.arrow').css({'visibility':'visible'})"
                                      onmouseout="$j(this).find('.arrow').css({'visibility':'hidden'})"
                                      onclick="onRun(true); return false;"
                                      rendered="#{tableBean.canRun}"  >
                            <table>
                                <tr>
                                    <td>
                                        <img src="#{contextPath}/webresource/images/test_ok.gif" />
                                    </td>
                                    <td rowspan="2" class="arrow"
                                        onclick="showUnitsMenu(event, 'b-test');return false;"
                                        style="visibility: hidden;">
                                        <f:verbatim>&amp;nbsp;&amp;nbsp;</f:verbatim>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <span>Test</span>
                                    </td>
                                </tr>
                            </table>
                        </h:outputLink>
                    </td>
                </c:if>

                <c:if test="#{tableBean.canCreateTest}">
                <td>
                    <h:form>
                        <a4j:commandLink action="#{tableCreatorWizardManager.startWizard}"
                            styleClass="toolbarButton" title="Create a new Test table"
                            onclick="return onBeforeEdit();"
                            oncomplete="ws.nav.go('#{studio.url('create/index')}?initStep=test/step2.xhtml')" >
                            <a4j:param assignTo="#{tableCreatorWizardManager.tableType}" value="TEST_DIRECT" />
                            <img src="#{contextPath}/webresource/images/test_new.gif" />
                            <div>Create Test</div>
                        </a4j:commandLink>
                    </h:form>
                </td>
                </c:if>

                <div id="targetTablesPanel">
                    <td style="padding: 0 10px">
                        <div id="targetTablesHeader" class="dropdown-header"></div>
                        <div>
                            <section id="targetTablesSection" class="padding-top-3px">
                                <div>
                                    <a class="dropdown-link" href="{tableLink}?id={tableId}">{tableName}</a>
                                </div>
                                <a id="target-tables-toggle-id" class="dropdown-additional-content-toggle" style="display: none" onclick="ws.ui.showPopupMenu(event, 'target-tables-additional-tables-id', $j(this).prev(), {'offsetTop' : 2, 'offsetLeft' : -5})" title="Other Target Tables" href="javascript:void(0)"><b class="caret"></b></a>
                                <div id="target-tables-additional-tables-id" class="dropdown-additional-content"></div>
                            </section>
                        </div>
                    </td>
                </div>
                <div id="tableTestsPanel">
                    <td class="tableTestPanelContainer">
                        <div id="testsPanel" class="dropdown-header">Available Tests/Runs</div>
                        <div>
                            <section id="testsSection" class="padding-top-3px">
                                <div>
                                    <a class="dropdown-link" href="{testLink}?id={testId}">{testName}</a>
                                </div>
                                <a id="tests-section-toggle-id" class="dropdown-additional-content-toggle" onclick="ws.ui.showPopupMenu(event, 'tests-section-available-tests-id', $j(this).prev(), {'offsetTop' : 2, 'offsetLeft' : -5})" title="Other Available Tests/Runs" href="javascript:void(0)"><b class="caret"></b></a>
                                <div id="tests-section-available-tests-id" class="dropdown-additional-content"></div>
                            </section>
                        </div>
                    </td>
                </div>
            </tr>
        </table>
    </div>
    </c:if>

    <c:if test="#{!empty tableBean.table}">
    <div id="tablePanel">
        <div>
            <c:set var="editableTablePart" value="#{tableBean.tablePart and studio.model.editable}" />
            <h:panelGroup style="display: none;" layout="block" styleClass="table-problems">
                <header>
                    <span style="margin-right:2px">Problems</span>
                    <img src="#{contextPath}/webresource/images/arrow_down.gif" title="Hide Problems" style="vertical-align:-2px"
                        onclick="$j('#problemsPanel').toggle('fast');this.src=(this.title == 'Hide Problems' ? 'webresource/images/arrow_right.gif' : 'webresource/images/arrow_down.gif');this.title=(this.title == 'Hide Problems' ? 'Show Problems' : 'Hide Problems');" />
                </header>
                <div id="problemsPanel">
                    <h:panelGroup rendered="#{editableTablePart}" layout="block" styleClass="problem-warning"
                        style="display:inline-block;margin:2px">
                        The table is composed of several partial tables. To edit partial tables, please use "Open in Excel"
                    </h:panelGroup>
                    <div id="problems-messages-panel-id">
                        <table class="problems-message-table"><tr><td class="border-padding-0">
                            <div data-message-id="{messageId}" class="{messageBoxClass}" style="{messageBoxStyle}">
                                <div class="arrow-top">
                                    <a onclick="toggleStacktrace(this); return false;" class="stacktrace-links"><div/></a>
                                </div>

                                <span id="summary_panel" class="summary-panels">
                                    <span class="white-space-pre-wrap">{messageSummary}</span>
                                </span>

                                <span id="stacktrace_panel" class="stacktrace-panels">
                                    <span id="stacktrace" class="white-space-pre-wrap code"></span>
                                </span>

                                <span style="{messageErrorCodeStyle}" class="code">
                                    <br />
                                    <span>{messageErrorCode1}</span>
                                    <span class="codeerror">{messageErrorCode2}</span>
                                    <span>{messageErrorCode3}</span>
                                </span>

                                <a onclick="if (!canOverwriteRevision()) return false; ws.nav.go(this.href.replace(/^.+#/, '')); return false;" style="{messageEditStyle}" title="{messageTitle}" href="{messageLink}?id={tableId}&amp;cell={messageCell}&amp;mode=edit">
                                    <img src="#{request.contextPath}/webresource/images/edit2.gif"/>
                                </a>

                                <div class="arrow-bottom" style="{messageArrowStyle}">
                                    <a onclick="toggleStacktrace(this); return false;" class="stacktrace-links"><div class="stacktrace-hidden"/></a>
                                </div>
                            </div>
                        </td></tr></table>
                    </div>
                </div>
            </h:panelGroup>

            <form target="hidden" name="editInExcelForm" method="post" action="#{contextPath}/action/launch">
                <input type="hidden" name="id" value="" />
            </form>

            <rules:tableEditor id="t" table="#{tableBean.table}" view="#{studio.tableView}"
                               rowIndex="#{tableBean.rowIndex}"
                               linkBuilder="#{studio.linkBuilder}" mode="#{tableBean.mode}"
                               editable="#{tableBean.editable}"
                               showFormulas="#{studio.showFormulas}"
                               beforeEditAction="#{tableBean.beforeEditAction}"
                               beforeSaveAction="#{tableBean.beforeSaveAction}"
                               afterSaveAction="#{tableBean.afterSaveAction}"
                               onBeforeEdit="return onBeforeEdit();"
                               onBeforeSave="javascript:onBeforeSave();" onAfterSave="javascript:onAfterSave(data);"
                               onRequestStart="ws.ui.showLoader();" onRequestEnd="ws.ui.hideLoader();"
                               onError="javascript:onError(data);" excludeScripts="prototype">

                <h:outputLink value="javascript:editInExcel(document.forms.editInExcelForm)"
                              rendered="#{tableBean.editable}">Edit in Excel
                </h:outputLink>
                <h:outputLink value="javascript:ws.nav.search($j(PopupMenu.lastTarget).text(), '#{studio.url('')}')">Search</h:outputLink>
            </rules:tableEditor>
        </div>
    </div>
    </c:if>

    <rich:popupPanel id="modalDiscardChanges" minWidth="530" autosized="true">
        <f:facet name="header">
            <h:outputText value="Discard changes" />
        </f:facet>

        <f:facet name="controls">
            <h:graphicImage value="/images/close.gif" class="close" onclick="RichFaces.$('modalDiscardChanges').hide();" alt="Close" />
        </f:facet>

        <h:form id="discardChangesForm">
            <h:panelGroup id="modalDiscardChangesData">
                <h:outputText value="Table is not saved. If you leave this page, all changes will be lost. Are you sure you want to discard unsaved changes?" />
            </h:panelGroup>

            <footer>
                <h:commandButton id="discardButton" value="Discard changes" styleClass="button-primary" />
                <input type="button" value="Cancel" onclick="#{rich:component('modalDiscardChanges')}.hide();" />
            </footer>
        </h:form>
    </rich:popupPanel>

    <c:if test="#{empty tableBean.table}">
        <script>
            ws.nav.go("#{studio.url()}", true);
        </script>
    </c:if>

    <script>
        var testIds = [undefined<c:forEach items="#{tableBean.tests}" var="test">, "#{utils.toJSText(test.id)}"</c:forEach>];
        //<![CDATA[
        var itemStatuses = function () {
            class ItemStatusesHandler {
                static EVENT_KEY = "click.statusHandlerEvents";
                static _CACHE = {};

                _testCases = null;
                _allTestCheck = null;
                _key = null;

                save() {
                    const that = this;
                    if (this._testCases?.length > 0) {
                        let cache = {}
                        this._testCases.each(function () {
                            cache[this.getAttribute("value")] = this.checked;
                        });
                        ItemStatusesHandler._CACHE[that._key] = cache;
                    }
                }

                load() {
                    const that = this;
                    if (this._testCases?.length > 0 && ItemStatusesHandler._CACHE[that._key]) {
                        this._testCases.each(function () {
                            this.checked = ItemStatusesHandler._CACHE[that._key][this.getAttribute("value")];
                            this.onclick();
                        });
                    }
                }

                bindEvents() {
                    const that = this;
                    // Unbind old handlers.
                    this._allTestCheck.unbind(ItemStatusesHandler.EVENT_KEY);
                    this._testCases.unbind(ItemStatusesHandler.EVENT_KEY);
                    // Bind new handlers.
                    this._allTestCheck.bind(ItemStatusesHandler.EVENT_KEY, function () {
                        that.save();
                    });
                    this._testCases.bind(ItemStatusesHandler.EVENT_KEY, function () {
                        ItemStatusesHandler._CACHE[that._key][this.getAttribute("value")] = this.checked;
                    });
                }

                constructor(key, preset) {
                    if (key == null) {
                        throw new Error("Key is not defined!");
                    }
                    if (ItemStatusesHandler._CACHE[key]) {
                        throw new Error("Duplicated key: " + key);
                    }
                    this._key = key;
                    this._testCases = $j("#testTable INPUT[type='checkbox']:not(INPUT[id='allTestCheck'])");
                    this._allTestCheck = $j("#allTestCheck");

                    if (this._testCases?.length > 0 && preset != null) {
                        this._testCases.each(function () {
                            if (typeof preset == "boolean") {
                                this.checked = preset;
                            } else {
                                let checked = preset[this.getAttribute("value")]
                                if (checked != null && typeof checked == "boolean") {
                                    this.checked = checked;
                                } else {
                                    this.checked = false;
                                }
                            }
                            this.onclick();
                        });
                    }
                    this.save();
                }
            }

            let all = {}

            all["b-run"] = new ItemStatusesHandler("b-run", true);
            all["b-benchmark"] = all["b-run"]; // Using the same handler for benchmark.
            all["b-trace"] = new ItemStatusesHandler("b-trace", false);

            return {
                switchTo(key) {
                    if (all[key] != null) {
                        let current = all[key];
                        current.bindEvents();
                        current.load();
                    }
                }
            }
        }();

        function open_win(url, name) {
            window.open(url, name, "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=yes, width=1240, height=700, top=20, left=100")
        }

        function showButtonMenu(event, popupId, buttonElem) {
            event.stopPropagation();
            var button = $j(event.target).parent(buttonElem);
            if (!button.length)
                button = $j(event.target).closest(buttonElem);
            ws.ui.showPopupMenu(event, popupId, button, {'offsetLeft' : -1, 'offsetTop' : 6, 'fitToScreen' : true});
        }

        function editInExcel(f) {
            if (!onBeforeEdit()) {
                return false;
            }
            f.id.value = "#{tableBean.id}";
            f.submit();
        }

        function onBeforeEdit() {
            var confirmNeeded = #{studio.model.confirmOverwriteNewerRevision};
            return !confirmNeeded || confirm("#{msg['ws.project.warning.version.old']}");
        }

        function onBeforeSave() {
            ws.ui.showLoader();
        }

        function onAfterSave(data) {
            ws.nav.go("#{studio.url('table')}?id=" + data.newId, true);
            ws.ui.hideLoader();
        }

        function onError(data) {
            ws.ui.hideLoader();
            ws.ui.info(data.message);
        }

        function onRun(skipSelectionCheck) {
            itemStatuses.switchTo("b-run");
            compiled(function (compiled) {
                let proceed = () => {
                    if (skipSelectionCheck || isAnyTestSelected()) {
                        runTestCases(!compiled);
                    }
                };

                if (!compiled) {
                    ws.ui.confirm({
                        title: 'Tests',
                        message: 'Tests can be run within current module only because the project is not loaded yet.',
                        onOK: proceed
                    });
                } else if ($j("#tableHasProblems") === 'true') {
                    ws.ui.confirm({
                        title: 'Tests',
                        message: 'Tests can be run for the currently opened module only because other modules contain errors.',
                        onOK: proceed
                    });
                } else {
                    proceed();
                }
            });
        }

        function onBenchmark() {
            itemStatuses.switchTo("b-benchmark");
            compiled(function (compiled) {
                let proceed = () => {
                    if (isAnyTestSelected()) {
                        $j("#testModuleHiddenInput").val(!compiled).prop('disabled', false);
                        onBenchmarkFunction();
                    }
                };

                if (!compiled) {
                    ws.ui.confirm({
                        title: 'Benchmark',
                        message: 'Benchmark can be run within current module only because the project is not loaded yet.',
                        onOK: proceed
                    });
                } else if ($j("#tableHasProblems") === 'true') {
                    ws.ui.confirm({
                        title: 'Benchmark',
                        message: 'Benchmark can be run for the currently opened module only because other modules contain errors.',
                        onOK: proceed
                    });
                } else {
                    proceed();
                }
            });
        }

        function onTraceAction() {
            open_win('#{traceUrl}', 'trace_win');
            ws.nav.reload();
        }

        function moduleOnlyInputArgs() {
            $j("#testModuleOnlyInputArgs")
                .val($j("#inputArgsMenu").find('input[type=checkbox]')[0].checked)
                .prop('disabled', false);
        }

        function checkInput() {
            var textBean = $j('textarea:[id=inputArgsForm\\:jsonInput]')[0].value;
            var beanSelected = $j('input:radio[name=inputArgsForm\\:inputTestCaseType]')[1].checked;
            if (beanSelected && textBean != null && textBean.length > 0) {
                try {
                    JSON.parse(textBean);
                } catch (e) {
                    message(e.message, 4000, true);
                    return false;
                }
            }

            return true;
        }

        function compiled(callback) {
            return $jq.ajax({
                url: "#{contextPath}/web/compile/project",
                datatype: "text"
            })
                .done(function (data) {
                    callback(data);
                });
        }

        function isAnyTestSelected() {
            $j("#testModuleOnlyHiddenInput")
                .val($j("#runModuleOnlySetting").find('input[type=checkbox]')[0].checked)
                .prop('disabled', false);

            var testRangesParam = getTestRangesParam();

            // undefined value means that the range is not used (default)
            if (testRangesParam === undefined) {
                $j("#testRangesHiddenInput")
                        .val(null)
                        .prop('disabled', true);
                return true;
            }
            // Validate on empty value of a range of IDs
            if (testRangesParam === "") {
                ws.ui.error("No tests selected");
                return false;
            }

            // Validate the range of entered IDs
            if ($j("#useTestRanges").is(":checked")) {
                var ranges = testRangesParam.trim().split(/,/);
                var allowed = testIds;
                for (var i = 0; i < ranges.length; i++) {
                    if (!ranges[i] || 0 === ranges[i].trim().length) {
                        if ($j.inArray(",", allowed ) === -1) {
                            ws.ui.error('Wrong [","] ID in the Range of IDs');
                            return false;
                        }
                        continue;
                    }
                    if ($j.inArray(ranges[i].trim(), allowed ) === -1) {
                        var edges = ranges[i].trim().split(/-/);
                        if (edges.length > 2 || (!edges[edges.length - 1] || 0 === edges[edges.length - 1].trim().length)) {
                            edges = ranges[i].trim().split(/\s[-]\s/);
                        }
                        if ((!edges[0] || 0 === edges[0].trim().length) && (!edges[edges.length - 1] || 0 === edges[edges.length - 1].trim().length)){
                            if ($j.inArray("-", allowed ) === -1) {
                                ws.ui.error('Wrong ["-"] ID in the Range of IDs');
                                return false;
                            }
                        } else {
                            if ($j.inArray( edges[0].trim(), allowed ) === -1) {
                                ws.ui.error("Wrong [" + edges[0] + "] ID in the Range of IDs");
                                return false;
                            }
                            if ($j.inArray( edges[edges.length - 1].trim(), allowed ) === -1) {
                                ws.ui.error("Wrong [" + edges[edges.length - 1] + "] ID in the Range of IDs");
                                return false;
                            }
                        }
                    }
                }
            }

            // Set the range of IDs to the hidden input for sending to a server
            $j("#testRangesHiddenInput")
                    .val(testRangesParam)
                    .prop('disabled', false);
            return true;
        }

        function onTestMenuOpen(event, block) {
            itemStatuses.switchTo(block);
            showButtonMenu(event, 'unitsMenu', 'a');
            $j('#unitsMenu .b-test, #unitsMenu .b-run, #unitsMenu .b-trace, #unitsMenu .b-benchmark').hide();
            $j('#unitsMenu .' + block).show();
        }

        function showUnitsMenu(event, block) {
            itemStatuses.switchTo(block);
            showButtonMenu(event, 'unitsMenu', 'a');
            $j('#unitsMenu .b-test, #unitsMenu .b-run, #unitsMenu .b-trace, #unitsMenu .b-benchmark').hide();
            $j('#unitsMenu .' + block).show();
        }

        function getTestQuery(currentOpenedModule) {
            var query = "?id=#{tableBean.id}";
            query += '&currentOpenedModule=' + (currentOpenedModule === true ? 'true' : $j("#runModuleOnlySetting").find('input[type=checkbox]')[0].checked);
            if ($j("#unitsMenu").is(":hidden")) {
                // No query for the hidden menu
                return query;
            }

            query += '&' + $j("#runCasesSettings").find("select,input").serialize();
            jQuery('#runCasesSettings').find('input[type=checkbox]:not(:checked)').each(function() {
                query += '&' + this.name + '=false';
            });

            var ids = getTestRangesParam();
            if (ids) {
                // Query only selected IDs
                query += '&testRanges=' + encodeURIComponent(ids);
            }
            return query;
        }

        function getTestRangesParam() {
            if ($j("#useTestRanges").is(":checked")) {
                // If a range is selected
                var ids = $j("#testRanges").val().trim();
            } else if (!$j("#allTestCheck").is(":checked")) {
                // If not all checkboxes are selected
                var ids = $j(".test-id:checked")
                        .map(function() { return $j(this).val(); })
                        .get()
                        .join();
            }
            return ids;
        }

        function runTestCases(currentOpenedModule) {
            var link="#{tableBean.table.type == 'xls.run.method' ? studio.url('test/run') : studio.url('test/test')}";
            ws.nav.go(link + getTestQuery(currentOpenedModule));
        }

        function downloadTestCases(currentOpenedModule) {
            var link="#{contextPath}/web/test/testcase";
            ws.nav.download(link + getTestQuery(currentOpenedModule));
        }

        function downloadManualTest() {
            var currentOpenedModule = $j("#inputArgsMenu").find('input[id=runTestModuleOnlyInputArgs]')[0].checked;
            var includeEmptyParamters = $j("#inputArgsMenu").find('input[id=skipEmptyParametersInputArgs]')[0].checked;
            var flattenParameters = $j("#inputArgsMenu").find('input[id=flattenParametersInputArgs]')[0].checked;
            let resultInJSONFormat = $j("#inputArgsMenu").find('input[id=resultInJSONFormat]')[0].checked;
            ws.nav.download("#{contextPath}/web/test/rule"
                + (resultInJSONFormat ? "/json" : "")
                + "?id=#{tableBean.id}&currentOpenedModule=" + currentOpenedModule
                + "&skipEmptyParameters=" + includeEmptyParamters
                + "&flattenParameters=" + flattenParameters);
        }

        function runManualTest() {
            var currentOpenedModule = $j("#inputArgsMenu").find('input[type=checkbox]')[0].checked;
            ws.nav.go("#{studio.url('test/run')}?id=#{tableBean.id}&currentOpenedModule=" + currentOpenedModule);
        }
        
        function editTable() {
            getCurrentTable().toEditMode();
        }

        function getCurrentTable() {
            // TODO: add "var='myVar'" parameter to rules:tableEditor tag instead of hardcoded variable name and id of a table
            if (typeof _tet_te != 'undefined') {
                return _tet_te; // variable name of a table, is generated from it's editorId te_toolbar
            }

            return {
                isHasChanges: function () {
                    return false;
                },
                rollbackChanges: function () {
                },
                setCellValue: function () {
                }
            };
        }
        $j(function () {
            ws.nav.setRequestId('#{tableBean.requestId}');

            var projectAdapter = {
                isHasChanges: function () {
                    return getCurrentTable().isHasChanges();
                },
                rollbackChanges: function () {
                    getCurrentTable().rollback();
                },
                applyCurrentChanges: function () {
                    return getCurrentTable().setCellValue();
                },
                showConfirmDialog: function (revertAndProceed) {
                    var $discardButton = $j('#discardChangesForm\\:discardButton');
                    $discardButton.off("click");
                    $discardButton.click(function () {
                        revertAndProceed();
                        RichFaces.$('modalDiscardChanges').hide();
                        return false;
                    });

                    RichFaces.$('modalDiscardChanges').show();
                }
            };

            ws.changes.configure(projectAdapter);

            $j(".title").each(function () {
                let elem = $j(this);
                let tooltip = elem.find("em");
                elem.mouseover(function () {
                    let left = Math.ceil(elem.position().left - tooltip.outerWidth() + elem.outerWidth());
                    if (left < 0) {
                        tooltip.css({"right": left + "px"});
                    }
                    let top = Math.ceil(elem.position().top - tooltip.outerHeight());
                    if (top < 22) { //bottom offset is 22 for tooltip
                        if (!elem.hasClass('title-bottom')) {
                            elem.addClass('title-bottom');
                        }
                    } else {
                        elem.removeClass('title-bottom');
                    }
                });
                elem.mouseout(function () {
                    tooltip.removeAttr('style'); //reset custom css
                });
            });
        });
        
        function onInputTestCaseTypeChange() {
            var beanSelected = $j('input:radio[name=inputArgsForm\\:inputTestCaseType]')[0].checked;
            if(beanSelected){
                $j('input:radio[name=inputArgsForm\\:inputTestCaseType]').val(['TEXT']);
            }else{
                $j('input:radio[name=inputArgsForm\\:inputTestCaseType]').val(['BEAN']);
            }
        }

        var $jq = jQuery.noConflict();

        $jq('#tableTestsPanel').bind('refresh', function () {
            $jq.ajax({
                url: "#{contextPath}/web/compile/tests/#{tableBean.id}",
                datatype: "text"
            })
                .done(function (data) {
                    var testsNotEmpty = data.allTests && data.allTests.length !== 0;
                    $jq('#tableTestsPanel').toggle(testsNotEmpty);
                    $jq('#testsPanel').toggle(testsNotEmpty);
                    $jq('#testsSection span').remove();
                    const rowTemplate = $j('#testsSection>div:nth-child(1)');
                    const htmlTemplate = $j('<div/>').append(rowTemplate.clone()).html();

                    let availableTests = '';
                    if (testsNotEmpty) {
                        data.allTests.forEach(function (item, i) {
                            const testLinkRow = htmlTemplate.replace(/{testLink}/g, item.uri)
                                .replace(/{testName}/g, item.name)
                                .replace(/{testId}/g, item.id);
                            if (i === 0) {
                                rowTemplate.after(testLinkRow.replace(/<div>/g, "<span>").replace(/<\/div>/g, "<\/span>"));
                            } else {
                                $j("#tests-section-toggle-id").show();
                                availableTests += testLinkRow;
                            }
                        });
                    }
                    $j('#tests-section-available-tests-id').html(availableTests);

                    if (data.compiled !== true) {
                        setTimeout(function () {$jq('#tableTestsPanel').trigger('refresh')}, 1000);
                    }
                });
        });

         updatePageRest();
         (function updateOnCompiled() {
             compiled(function (data) {
                 if (data !== true) {
                    setTimeout(function () {updateOnCompiled()}, 1000);
                 } else {
                    updatePageRest(false);
                 }
             });
         })();

         function updatePageRest() {
              $jq.ajax({
                  url: "#{contextPath}/web/compile/table/#{tableBean.id}",
                  datatype: "json"
              })
              .done(function (data) {
                  const warnings = data.warnings || [];
                  const errors = data.errors || [];
                  if (warnings.length > 0 || errors.length > 0 || #{tableBean.tablePart and studio.model.editable}) {
                      $jq(".table-problems").show()
                  }
                  if (data.tableRunState === 'CANNOT_RUN') {
                      $j(".on-errors-hide").hide();
                  }
                  applyTargetTables(data.targetTables || []);
                  applyProblems(errors, warnings, data.tableUrl);
                  applyRunOpenedModuleCheckboxes(data.tableRunState);
                  adjustJSFElements();
              });
         }

        function adjustJSFElements() {
            const editorWrapper = $j("#t_te_editorWrapper");
            if (editorWrapper.length && editorWrapper.attr("data-jsf-adjusted") !=='true') {
                editorWrapper.css({"top": editorWrapper.position().top + $j(".table-problems").outerHeight(true) + "px"});
                editorWrapper.attr("data-jsf-adjusted", "true");
            }
        }

        function applyRunOpenedModuleCheckboxes(tableRunState) {
            const runTestModuleOnly = $j("#runTestModuleOnly");
            const runTestModuleOnlyInputArgs = $j("#runTestModuleOnlyInputArgs");
            const testModuleOnlyField = $j("#testModuleOnlyField");
            if (tableRunState === 'CAN_RUN') {
                runTestModuleOnly.prop('checked', false);
                runTestModuleOnly.prop('disabled', false);
                runTestModuleOnlyInputArgs.prop('checked', false);
                runTestModuleOnlyInputArgs.prop('disabled', false);
                testModuleOnlyField.prop('checked', false);
                testModuleOnlyField.prop('disabled', false);
            } else {
                runTestModuleOnly.prop('checked', true);
                runTestModuleOnly.prop('disabled', true);
                runTestModuleOnlyInputArgs.prop('checked', true);
                runTestModuleOnlyInputArgs.prop('disabled', true);
                testModuleOnlyField.prop('checked', true);
                testModuleOnlyField.prop('disabled', true);
            }
        }

         function applyProblems(errors, warnings, tableUrl) {
            if (errors.length > 0 || warnings.length > 0) {
                $j("#tableHasProblems").val(true);
                $j("#problems-messages-panel-id").show();
                const rowTemplate = $j('#problems-messages-panel-id>table:nth-child(1)');
                const htmlTemplate = $j('<div/>').append(rowTemplate).html();
                let messages = "";
                const hiddenStyle = " display: none; ";
                errors.concat(warnings).each(function(item, i) {
                    const messageBoxClass = item.severity == 'ERROR' ? 'problem-error' : (item.severity == 'WARN' ? 'problem-warning' : 'problem-info');
                    let linkTitle = "Edit cell containing ";
                    linkTitle += item.severity == 'ERROR' ? 'error' : (item.severity == 'WARN' ? 'warning' : 'info');
                    const hasErrorCode = item.errorCode && item.errorCode.length > 0;
                    messages += htmlTemplate.replaceString(/{messageBoxClass}/g, messageBoxClass)
                        .replaceString(/{messageArrowStyle}/g, item.hasStacktrace ? "" : hiddenStyle)
                        .replaceString(/{messageSummary}/g, ws.utils.escapeHtml(item.summary))
                        .replaceString(/{messageTitle}/g, linkTitle)
                        .replaceString(/{tableId}/g, item.tableId)
                        .replaceString(/{messageId}/g, item.id)
                        .replaceString(/{messageCell}/g, item.errorCell)
                        .replaceString(/{messageLink}/g, tableUrl)
                        .replaceString(/{messageBoxStyle}/g, item.hasStacktrace ? 'padding-bottom: 3px' : '')
                        .replaceString(/{messageErrorCode1}/g, hasErrorCode ? ws.utils.escapeHtml(item.errorCode[0]) : "")
                        .replaceString(/{messageErrorCode2}/g, hasErrorCode ? ws.utils.escapeHtml(item.errorCode[1]) : "")
                        .replaceString(/{messageErrorCode3}/g, hasErrorCode ? ws.utils.escapeHtml(item.errorCode[2]) : "")
                        .replaceString(/{messageEditStyle}/g, (!#{tableBean.editable} || !item.hasLinkToCell) ? hiddenStyle : "")
                        .replaceString(/{messageErrorCodeStyle}/g, (!item.hasLinkToCell || !hasErrorCode) ? hiddenStyle : "");
                });

                $j("#problems-messages-panel-id").html(htmlTemplate + messages);
              }
         };

         function applyTargetTables(targetTables) {
             if (targetTables.length > 0) {
                let targetTablesHeader = "Target Table";
                $jq('#targetTablesPanel').show();
                $jq('#targetTablesSection span').remove();
                const rowTemplate = $j('#targetTablesSection>div:nth-child(1)');
                const htmlTemplate = $j('<div/>').append(rowTemplate.clone()).html();
                let additionalTargetTables = '';
                targetTables.each(function(item, i) {
                    for (keyUrl in item) {
                        const table = item[keyUrl];
                        const targetTableLinkRow = htmlTemplate.replace(/{tableLink}/g, keyUrl)
                           .replace(/{tableName}/g, table.name)
                           .replace(/{tableId}/g, table.id);
                        if (i === 0) {
                            rowTemplate.after(targetTableLinkRow.replace(/<div>/g, "<span>").replace(/<\/div>/g, "<\/span>"));
                        } else {
                            $j("#target-tables-toggle-id").show();
                            additionalTargetTables += targetTableLinkRow;
                        }
                    }
                });
                if (targetTables.length > 1) {
                    targetTablesHeader += "s";
                }
                $j("#targetTablesHeader").html(targetTablesHeader);
                $j('#target-tables-additional-tables-id').html(additionalTargetTables);
             }
         }

        $jq('#tableTestsPanel').trigger('refresh');

        function toggleStacktrace(arrowBlock) {
            var $j = jQuery.noConflict();
            const arrow = $j(arrowBlock).find("div");
            const isHidden = arrow.hasClass("stacktrace-hidden")
            const messageBox = $j(arrowBlock).parent().parent();
            $j(".summary-panels").show();
            $j(".stacktrace-panels").hide();
            $j(".stacktrace-showed").each(function(i, e) { $j(e).addClass("stacktrace-hidden").removeClass("stacktrace-showed"); });
            $j(".arrow-top a div").removeClass("stacktrace-hidden");
            if (isHidden) {
                 $j.ajax({
                    url: "#{contextPath}/web/message/" + messageBox.attr("data-message-id") + "/stacktrace",
                    datatype: "text"
                })
                .done(function (data) {
                    messageBox.find(".stacktrace-panels span").text(data);
                    messageBox.find('[id$="stacktrace_panel"]').show();
                    messageBox.find('[id$="summary_panel"]').hide();
                    arrow.addClass("stacktrace-showed").removeClass("stacktrace-hidden");
                    $j(arrowBlock).parent().parent().find(".arrow-top a div").addClass("stacktrace-showed");
                });
            }
        }
        //]]>
    </script>

</ui:composition>
