<?xml version="1.0" encoding="UTF-8"?>
<ui:composition
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:a4j="http://richfaces.org/a4j">

    <h:panelGroup id="editProjectTagsPanel">
        #{editProjectTagsBean.init(node)}
        <h:panelGroup rendered="#{not empty editProjectTagsBean.tags}">
            <h3>
                Tags
            </h3>
        </h:panelGroup>
        <table class="formfields" style="max-width: 500px;">
            <ui:repeat value="#{editProjectTagsBean.tags}" var="tagInfo">
                <tr>
                    <td class="label">
                        <h:outputText value="#{tagInfo.typeName}:"/>
                    </td>
                    <td>
                        <h:outputText value="#{empty tagInfo.name ? '[None]' : tagInfo.name}" rendered="#{not canModifyTags}"/>

                        <h:panelGroup rendered="#{canModifyTags}">
                            <h:inputHidden id="tag-type-name" value="#{tagInfo.typeName}"/>
                            <h:inputHidden id="tag-name" value="#{tagInfo.name}"/>

                            <select class="editable-select #{tagInfo.extensible ? '' : 'readonly'} #{tagInfo.tagTypeExists ? 'tag-type-exists' : ''}">
                                <h:panelGroup rendered="#{tagInfo.nullable}">
                                    <h:panelGroup rendered="#{tagInfo.name == '[None]'}">
                                        <option value="[None]" selected="selected">[None]</option>
                                    </h:panelGroup>
                                    <h:panelGroup rendered="#{tagInfo.name != '[None]'}">
                                        <option value="[None]">[None]</option>
                                    </h:panelGroup>
                                </h:panelGroup>
                                <h:panelGroup rendered="#{not tagInfo.nullable and tagInfo.name == '[None]'}">
                                    <option value="[None]" disabled="disabled" selected="selected">[None]</option>
                                </h:panelGroup>

                                <ui:repeat value="#{editProjectTagsBean.getTagValues(tagInfo.typeName)}" var="t">
                                    <h:panelGroup rendered="#{tagInfo.name == t.name}">
                                        <option value="#{t.name}" selected="selected"><h:outputText value="#{t.name}"/></option>
                                    </h:panelGroup>
                                    <h:panelGroup rendered="#{tagInfo.name != t.name}">
                                        <option value="#{t.name}"><h:outputText value="#{t.name}"/></option>
                                    </h:panelGroup>
                                </ui:repeat>
                            </select>
                            <h:panelGroup styleClass="error"
                                          rendered="#{not empty editProjectTagsBean.errorMessage and editProjectTagsBean.typeName == tagInfo.typeName}">
                                <h:outputText value="#{editProjectTagsBean.errorMessage}"/>
                            </h:panelGroup>
                        </h:panelGroup>
                    </td>
                </tr>
            </ui:repeat>

            <h:inputHidden id="repoIdForTags" value="#{editProjectTagsBean.repoId}"/>
            <h:inputHidden id="realPathForTags" value="#{editProjectTagsBean.realPath}"/>
            <a4j:jsFunction name="saveTagChanges" action="#{editProjectTagsBean.save()}"
                            execute="repoIdForTags realPathForTags"
                            render="editProjectTagsPanel projectTree nodeButtons propertiesContent"
                            onbegin="ajaxInProgress = true;"
                            oncomplete="ajaxInProgress = false;">
                <a4j:param name="typeName" assignTo="#{editProjectTagsBean.typeName}"/>
                <a4j:param name="tagName" assignTo="#{editProjectTagsBean.tagName}"/>
            </a4j:jsFunction>
            <a4j:jsFunction name="refreshTags" render="editProjectTagsPanel" 
                            onbegin="ajaxInProgress = true;" 
                            oncomplete="ajaxInProgress = false;"/>
        </table>

        <script>
            //<![CDATA[
            
            function attemptToSaveChanges(typeName, tagName) {
                let confirmNeeded = #{editProjectTagsBean.shouldAskForConfirmation};
                let shouldProceed = !confirmNeeded || confirm("#{msg['ws.project.warning.version.old']}");
                
                if (shouldProceed) {
                    saveTagChanges(typeName, tagName)
                } else {
                    refreshTags();
                }
            }

            function confirmAddTag(tagType, tagName) {
                return window.confirm('Tag "' + tagName + '" does not exist for tag type "' + tagType + '".\nDo you want to add it?')
            }

            function confirmNonPersistentTagRemoval(tagType) {
                return window.confirm('Tag type "' + tagType + '" does not exist, therefore this tag can only be removed. Remove tag?')
            }

            window.ajaxInProgress = false;
            function initEditProjectTagsPanel() {
                $j('#editProjectTagsPanel .editable-select').editableSelect({
                    filter: false
                }).on('select.editable-select', function (e, $li) {
                    if (ajaxInProgress) return;
                    let typeName = $li.parent().parent().find('input[type=hidden][id$="tag-type-name"]').val();
                    let tagName = $j(this).val();
                    let shouldSave = $j(this).hasClass("tag-type-exists") || (tagName === "[None]" && confirmNonPersistentTagRemoval(typeName));
                    if (shouldSave) {
                       attemptToSaveChanges(typeName, $li.text());
                   } else {
                        refreshTags();
                    }
                });

                let applyManualEdit = function () {
                    $j(this).off('blur');
                    if ($j(this).hasClass("tag-type-exists")) {
                        if (ajaxInProgress) return;
                        let typeName = $j(this).parent().find('input[type=hidden][id$="tag-type-name"]').val();
                        let tagName = $j(this).val();
                        let exist = $j(this).parent().find('.es-list > li').filter(function () {
                            return $j(this).text().toLowerCase() === tagName.toLowerCase();
                        }).length > 0;

                        if (exist) {
                            attemptToSaveChanges(typeName, tagName);
                        } else {
                            if (confirmAddTag(typeName, tagName)) {
                                $j(this).blur();
                                attemptToSaveChanges(typeName, tagName);
                            }
                        }
                    }
                };
                let $comboInputs = $j('#editProjectTagsPanel .editable-select.es-input');
                $comboInputs.focus(function () {
                    $j(this).blur(applyManualEdit);
                });

                $comboInputs.each(function () {
                    let handler = $j._data(this, "events")['keydown'][0]['handler'];
                    let input = this;
                    $j(this).off('keydown').on('keydown', function (e) {
                        if (e.key === "Enter") {
                            e.preventDefault();
                            applyManualEdit.call(input);
                            return;
                        }
                        if (e.key === "ArrowUp" || e.key === "ArrowDown") {
                            handler.apply(this, arguments);
                            setTimeout(() => {
                                let selectedValue = $j(this).next('.es-list').find('li.selected').text();
                                $j(this).val(selectedValue);
                            });
                            return;
                        }
                        if (e.key !== "Escape" && e.key !== "Tab") {
                            if ($j(this).val() === "[None]" && !$j(this).prop('readonly')) {
                                $j(this).val("");
                            }
                        }
                        handler.apply(this, arguments);
                    });
                });


                $j('#editProjectTagsPanel .editable-select').prop('readonly', false);
                $j('#editProjectTagsPanel .editable-select.readonly').prop('readonly', true);

                let $hiddenNames = $j('input[type=hidden][id$="tag-name"]');
                $hiddenNames.each(function () {
                    let $name = $j(this);
                    $j(this).next('#editProjectTagsPanel .editable-select.es-input').val($name.val());
                });
            }

            $j(() => initEditProjectTagsPanel());

            //]]>
        </script>

    </h:panelGroup>
</ui:composition>
