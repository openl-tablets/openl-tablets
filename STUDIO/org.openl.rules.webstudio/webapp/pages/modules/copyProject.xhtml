<ui:composition
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:a4j="http://richfaces.org/a4j"
        xmlns:rich="http://richfaces.org/rich"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:c="http://java.sun.com/jsp/jstl/core">

    <rich:popupPanel id="modalCopyProject" minWidth="550" autosized="true">
        <f:facet name="header">
            <h:outputText value="Copy project"/>
        </f:facet>

        <f:facet name="controls">
            <h:graphicImage value="/images/close.gif" class="close" alt="Close" title="Close"
                            onclick="RichFaces.$('modalCopyProject').hide();"/>
        </f:facet>

        <c:set value="#{copyBean.canCreateNewProject}" var="canCreateNewProject"/>
        <c:set value="#{copyBean.getCanCopyToNewBranch(copyBean.getCurrentProject())}" var="canCopyToNewBranch"/>

        <h:form id="copyProjectForm">
            <h:panelGroup id="modalCopyProjectData">
                <h:panelGrid columns="2" styleClass="formfields" cellspacing="1" columnClasses="label,">
                    <h:outputLabel value="Project Name:"/>
                    <h:outputText id="currentProjectName" value="#{copyBean.businessName}"/>
                </h:panelGrid>
                <h:panelGrid columns="2" styleClass="formfields" cellspacing="1" columnClasses="label,"
                             rendered="#{copyBean.supportsBranches}">
                    <h:outputLabel value="Create a New Project:" for="separateProjectCheckbox"
                                   rendered="#{canCreateNewProject and canCopyToNewBranch}"/>
                    <h:selectBooleanCheckbox id="separateProjectCheckbox" value="#{copyBean.separateProject}"
                                             rendered="#{canCreateNewProject and canCopyToNewBranch}"
                                             onclick="updateSeparateProjectState()">
                    </h:selectBooleanCheckbox>
                    <h:outputLabel for="currentBranchName" value="Current Branch:"/>
                    <h:outputText id="currentBranchName" value="#{copyBean.currentBranchName}"/>
                    <h:outputLabel for="newBranchName" styleClass="required" value="New Branch Name:"
                                   rendered="#{canCopyToNewBranch}"/>
                    <h:inputText id="newBranchName" value="#{copyBean.newBranchName}"
                                 validator="#{copyBean.newBranchNameValidator}" rendered="#{canCopyToNewBranch}"/>
                    <h:outputText value=""/>
                    <h:message id="newBranchNameMessage" for="newBranchName" styleClass="error"
                               style="white-space: pre-wrap;"/>
                </h:panelGrid>
                <h:panelGrid id="newProject" columns="2" styleClass="formfields" cellspacing="1" columnClasses="label,"
                             rendered="#{canCreateNewProject}">
                    <h:outputLabel for="newProjectName" styleClass="required" value="New Project Name:"/>
                    <h:inputText id="newProjectName" maxlength="50" value="#{copyBean.newProjectName}"
                                 validator="#{copyBean.newProjectNameValidator}"/>
                    <h:outputText value=""/>
                    <h:message for="newProjectName" styleClass="error"/>

                    <h:outputLabel for="repository" value="Repository:" styleClass="required"/>
                    <h:selectOneMenu id="repository" value="#{copyBean.toRepositoryId}">
                        <f:ajax event="change" execute="@form" render="newProject destRepositoryType"
                                onevent="onRepositoryChange"/>
                        <f:selectItems value="#{copyBean.allowedRepositories}" var="repository"
                                       itemValue="#{repository.id}" itemLabel="#{repository.name}"/>
                    </h:selectOneMenu>

                    <h:outputLabel id="projectFolderLabel" for="projectFolder" value="Path:" rendered="#{copyBean.supportsMappedFolders}"/>
                    <h:panelGroup rendered="#{copyBean.supportsMappedFolders}" style="display: inline-block; white-space: nowrap;">
                        <h:inputText id="projectFolder" value="#{copyBean.projectFolder}"
                                     validator="#{copyBean.projectPathValidator}"
                                     styleClass="with-button-select"/>
                        <input type="button" value="..." class="button-select"
                               onclick="openSelectFolderDialog('#{copyBean.toRepositoryId}', 'copyProjectForm:projectFolder')"/>
                        <h:message for="projectFolder" styleClass="error" style="display: block; white-space: break-spaces;"/>
                    </h:panelGroup>

                    <h:outputText value="Comment:"/>
                    <h:inputTextarea id="comment" value="#{copyBean.comment}" type="text" size="35" readonly="false"
                                     validator="#{copyBean.commentValidator}"/>
                    <h:outputText value=""/>
                    <h:message for="comment" styleClass="error"/>

                    <ui:param name="hasRevisions" value="#{copyBean.maxRevisionsCount > 0}"/>

                    <h:outputText id="copyOldRevisionsLabel" value="Copy old revisions:" rendered="#{hasRevisions}"/>
                    <h:selectBooleanCheckbox id="copyOldRevisions" value="#{copyBean.copyOldRevisions}"
                                             onclick="updateRevisionsCountState()"
                                             rendered="#{hasRevisions}">
                    </h:selectBooleanCheckbox>

                    <h:outputText id="revisionsCountLabel" value="Revisions to copy:"
                                  rendered="#{hasRevisions}"/>
                    <rich:inputNumberSpinner id="revisionsCount" value="#{copyBean.revisionsCount}"
                                             minValue="1" maxValue="#{copyBean.maxRevisionsCount}" cycled="false"
                                             onchange="updateCopyCanBeSlowWarning();"
                                             rendered="#{hasRevisions}"/>
                    <h:outputText value=""/>
                    <h:message for="revisionsCount" styleClass="error"/>

                    <h:outputText value="" rendered="#{hasRevisions}"/>
                    <h:outputText id="copyCanBeSlowWarning" value="Copying too many revisions can be slow"
                                  styleClass="warning" rendered="#{hasRevisions}"/>
                </h:panelGrid>
                <h:panelGrid columns="2" styleClass="formfields" cellspacing="1" columnClasses="label,"
                             rendered="#{not empty copyBean.errorMessage}">
                    <h:outputText value=""/>
                    <h:outputText value="#{copyBean.errorMessage}" styleClass="error"/>
                </h:panelGrid>
            </h:panelGroup>

            <footer>
                <ui:param name="tagsAreConfigured" value="#{repositoryTreeController.tagsAreConfigured}"/>

                <a4j:commandButton id="copyProjectButton" value="Copy"
                                   onclick="copyProjectWithRequiredInfo(() => $j('#copyProjectForm\\:copyButton').click(), $j('#copyProjectForm\\:newProjectName').val()); return false;"
                                   styleClass="button-primary"/>
                <a4j:commandButton id="copyButton"
                                   onclick="return confirmSwitchingToNewBranch(#{copyBean.confirmationRequired});"
                                   action="#{copyBean.copy}"
                                   styleClass="hidden"
                                   render="@form"
                                   data="#{copyBean.errorMessage}"
                                   oncomplete="updateStates(); if (!event.data &amp;&amp; #{!facesContext.validationFailed}) {RichFaces.$('modalCopyProject').hide(); refreshPage(); return false;}"/>
                <input type="button" value="Cancel" onclick="RichFaces.$('modalCopyProject').hide();"/>
            </footer>

            <a4j:jsFunction name="renderCopyProjectForm" render="copyProjectForm" oncomplete="showCopyProjectDialog()">
                <a4j:param name="repositoryId" assignTo="#{copyBean.repositoryId}"/>
                <a4j:param name="projectName" assignTo="#{copyBean.initProject}"/>
            </a4j:jsFunction>

        </h:form>

        <h:inputHidden id="destRepositoryType" required="false" value="#{copyBean.destRepositoryType}"/>
    </rich:popupPanel>

    <script>
        //<![CDATA[
        var refreshPage = function () {
            // In repository tab this function will be redefined with more lightweight refresh because POST requests
            // without post/redirect/get pattern are used there heavily.
            location.reload();
        };

        var copyProjectRepositoryType = undefined;

        function openCopyProjectDialog(repositoryId, repositoryType, projectName, refreshPageFunc) {
            renderCopyProjectForm(repositoryId, projectName);
            copyProjectRepositoryType = repositoryType;
            if (refreshPageFunc) {
                refreshPage = refreshPageFunc;
            }
        }

        function showCopyProjectDialog() {
            fixInputNumberSpinner('copyProjectForm:revisionsCount');
            updateStates();
            $j('#copyProjectForm\\:copyProjectButton').prop('disabled', true);
            addCopyListener();
            RichFaces.$("modalCopyProject").show();
            focusElement('copyProjectForm:newProjectName');
        }
        
        function addCopyListener() {
            var copyListener = function () {
                let shouldSeparateProject = true;
                let branchName = '';
                let projectName = '';
                let $separateProjectCheckbox = $j('#copyProjectForm\\:separateProjectCheckbox');
                if ($separateProjectCheckbox.length) {
                    shouldSeparateProject = $separateProjectCheckbox.is(':checked');
                }
                let $branchName = $j('#copyProjectForm\\:newBranchName');
                if ($branchName.length) {
                    branchName = $j('#copyProjectForm\\:newBranchName').val().trim();
                    if (!$separateProjectCheckbox.length) {
                        shouldSeparateProject = false;
                    }
                }
                let $projectName = $j('#copyProjectForm\\:newProjectName');
                if ($projectName.length) {
                    projectName = $projectName.val().trim();
                }
                let disableCopy = !shouldSeparateProject && branchName.length === 0 || shouldSeparateProject && projectName.length === 0;
                $j('#copyProjectForm\\:copyProjectButton').prop('disabled', disableCopy);
            };
            var selector = '#copyProjectForm\\:newProjectName, #copyProjectForm\\:newBranchName, #copyProjectForm\\:separateProjectCheckbox';
            $j(selector).off().on('change keyup keydown cut paste click', function () {
                // setTimeout() is needed to correctly handle on paste / on cut events
                setTimeout(function () {
                    copyListener();
                }, 0);
            });
            copyListener();
        }

        function onRepositoryChange() {
            updateRevisionsCountState();
            addCopyListener();
        }

        function updateStates() {
            updateRevisionsCountState();
            updateSeparateProjectState();
        }

        function updateRevisionsCountState() {
            var shouldCopy = $j('#copyProjectForm\\:copyOldRevisions').is(':checked');
            var $revisionsCount = $j('#copyProjectForm\\:revisionsCount');
            var $row = $revisionsCount.closest('tr');
            if (shouldCopy) {
                $row.show();
            } else {
                $row.hide();
            }
            updateCopyCanBeSlowWarning();
            resizePopupPanel('modalCopyProject');
        }

        function updateCopyCanBeSlowWarning() {
            var shouldCopy = $j('#copyProjectForm\\:copyOldRevisions').is(':checked');
            var $revisionsCount = $j('#copyProjectForm\\:revisionsCount');
            var $rowWarning = $j('#copyProjectForm\\:copyCanBeSlowWarning').closest('tr');
            if (shouldCopy && $revisionsCount.find('input').val() >= 10) {
                $rowWarning.show();
            } else {
                $rowWarning.hide();
            }
        }

        function updateSeparateProjectState() {
            var $separateProjectCheckbox = $j('#copyProjectForm\\:separateProjectCheckbox');
            if (!$separateProjectCheckbox.length) {
                return;
            }

            var shouldSeparateProject = $separateProjectCheckbox.is(':checked');
            var $newBranchName = $j('#copyProjectForm\\:newBranchName').closest('tr');
            var $newBranchNameMessage = $j('#copyProjectForm\\:newBranchNameMessage').closest('tr');
            var $newProject = $j('#copyProjectForm\\:newProject');
            if (shouldSeparateProject) {
                $newBranchName.hide();
                $newBranchNameMessage.hide();
                $newProject.show();
            } else {
                $newBranchName.show();
                $newBranchNameMessage.show();
                $newProject.hide();
            }
            resizePopupPanel('modalCopyProject');
        }

        var confirmSwitchingToNewBranch = function (required) {
            var $separateProjectCheckbox = $j('#copyProjectForm\\:separateProjectCheckbox');
            if (!required || $separateProjectCheckbox.is(':checked')) {
                return true;
            }
            return confirm("#{msg['ws.project.warning.other.branch']}");
        };

        function copyProjectWithRequiredInfo(originalSubmit, projectName) {
            let afterAction = () => $j('#copyProjectForm\\:copyButton').click();

            if (#{canCreateNewProject})
            {
                var $separateProjectCheckbox = $j('#copyProjectForm\\:separateProjectCheckbox');
                if ($separateProjectCheckbox.length === 0 || $separateProjectCheckbox.is(':checked')) {
                    afterAction = () => createProjectTagsIfNeeded(projectName, originalSubmit, false, true);
                }
            }
            withCommitInfoRequired(
                '#{studio.currentUsername}',
                () => copyProjectRepositoryType === "repo-git" || $j("#destRepositoryType").val() === "repo-git",
                afterAction
            );
        }
        //]]>
    </script>
</ui:composition>
