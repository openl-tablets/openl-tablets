<ui:composition
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:a4j="http://richfaces.org/a4j"
>
    <style>
        a.load-more {
            font-size: 25px;
            text-align: center;
        }
        .search-revision-form {
            display: flex;
            flex-direction: row;
            margin-left: 6px;
        }
        .search-revision-form label {
            font-weight: bold;
        }
        .search-revision-form .search-form-column {
            display: flex;
            align-items: center;
        }
        .tech-rev {
            background-color: #f5f5f5;
        }
    </style>
    <div id="project-revisions">
        <form class="search-revision-form">
            <div style="flex: 0 0 12em;" class="search-form-column">
                <label>Technical revisions:</label>
                <input name="full-log" type="checkbox"/>
            </div>
            <div class="search-form-column">
                <input name="search-filter" type="text" placeholder="Search filter..."/>
            </div>
        </form>
        <section class="table-layout">
            <header class="table-row">
                <div>Modified By</div>
                <div>Modified At</div>
                <div class="comments">Comment</div>
                <div>Revision ID</div>
                <div class="actions">Action</div>
            </header>
            <div class="table-row" style="display: none">
                <div attr="modified-by"> </div>
                <div attr="modified-at"> </div>
                <div attr="comment">
                    <span attr="comment-parts">
                        <span/>
                        <a href="javascript:void(0)"/>
                        <span/>
                    </span>
                </div>
                <div attr="revision-id" class="center-align">
                    <span class="expandable"/>
                    <span class="hidden"/>
                </div>
                <div class="center-align">
                    <a href="javascript:void(0)" class="magnifying-glass-icon" attr="open-revision" />
                </div>
            </div>
        </section>
        <span class="noEntries" style="display: none">No version history</span>
        <a href="javascript:void(0)" class="load-more down-arrow-icon" title="Load more..." style="display: none;"/>
    </div>

    <a4j:jsFunction name="openRulesProject"
                    immediate="true"
                    render="nodeView nodeTabPanel projectTree content">
        <a4j:param name="projectName" assignTo="#{repositoryTreeController.rulesProject}"/>
    </a4j:jsFunction>

    <a4j:jsFunction name="openProjectVersion"
                    immediate="true"
                    render="nodeView nodeTabPanel projectTree content"
                    oncomplete="if(!#{repositoryTree.hasMessages}) {refreshRulesDeployConfiguration();}">
        <a4j:param name="version" assignTo="#{repositoryTreeController.projectVersion}"/>
    </a4j:jsFunction>

    <script>//<![CDATA[
        function initializeProjectRevisionTable(type, repoName, projectName, branch, canOpenOtherVersion) {
            const revisionTableHandler = function () {
                const LOAD_MORE_EVENT = "click.loadMoreRevisions";
                const $loadMoreBtn = $j('#project-revisions .load-more');
                const $searchForm = $j('#project-revisions .search-revision-form');
                $searchForm.hide();
                const $searchInput = $searchForm.find("input[name=search-filter]");
                const $fullLogInput = $searchForm.find("input[name=full-log]");
                $searchInput.unbind("change");
                $fullLogInput.unbind("change");
                $fullLogInput.prop("checked", false);
                $searchInput.val("");
                $searchInput.unbind("keypress");
                $searchInput.keypress((event) => {
                    if (event.keyCode === 13) {
                        $searchInput.blur();
                        return false;
                    }
                })
                const $revisionRowTemplate = $j('#project-revisions>section>div:nth-child(2)').clone();
                $revisionRowTemplate.css({"display": ""})
                const $commentsPartTemplate = $revisionRowTemplate.find('[attr=comment-parts]').remove();
                const $expandableRevisionTemplate = $revisionRowTemplate.find('[attr=revision-id]>span').remove();

                const formatDateTime = (date) => {
                    const options = {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit'
                    };
                    return new Date(Date.parse(date)).toLocaleString("en-US", options).replace(",", "");
                };

                function backToPropsTab() {
                    if (confirm("Project data in the workspace will be replaced by the data of specified revision that will be opened from repository. Dependent projects will be opened too.")) {
                        /*$j("#nodeTabPanel-value").value return undefined */
                        document.getElementById('nodeTabPanel-value').value = "#{repositoryTreeState.defSelectTab}";/*"Properties";*/
                        return true;
                    } else {
                        return false;
                    }
                }

                const fetchMoreData = (projectData, repoFeatures, query, onSuccess) => {
                    let targetUrl = "#{contextPath}/web";
                    const canOpenVersions = projectData.canOpenVersions;
                    if (projectData.type === "project") {
                        targetUrl += "/repos/" + encodeURIComponent(projectData.repoName);
                        if (repoFeatures.branches) {
                            targetUrl += "/branches/" + encodeURIComponent(projectData.branch.replaceAll("/", " "));
                        }
                        targetUrl += "/projects/" + encodeURIComponent(projectData.name);
                    } else {
                        targetUrl += "/deploy-config-repo/configs/"  + encodeURIComponent(projectData.name);
                    }
                    targetUrl += "/history";
                    query = $j.extend({}, query, {
                        search: $searchInput.val(),
                        techRevs: $fullLogInput.is(":checked")
                    });
                    $j.ajax({
                        type: "GET",
                        url: targetUrl,
                        datatype: "json",
                        data: query
                    }).done(function (data) {
                        const content = data.content || [];
                        content.forEach(rev => {
                            const $revisionRow = $revisionRowTemplate.clone();
                            $revisionRow.find("[attr=modified-by]")
                                .attr("title", rev.author.email)
                                .text(rev.author.displayName);
                            $revisionRow.find("[attr=modified-at]").text(formatDateTime(rev.createdAt));

                            const $comment = $revisionRow.find("[attr=comment]")
                            if (projectData.type === "project") {
                                const commentParts = rev.commentParts || [];
                                if (commentParts.length === 3) {
                                    const $commentsPart = $commentsPartTemplate.clone();
                                    $commentsPart.find("span:nth-child(1)").text(commentParts[0])
                                    $commentsPart.find("a").text(commentParts[1])
                                        .on("click", () => {
                                            openRulesProject(commentParts[1]);
                                        });
                                    $commentsPart.find("span:nth-child(3)").text(commentParts[2])
                                    $comment.append($commentsPart)
                                } else {
                                    $comment.text(rev.fullComment);
                                }
                            } else {
                                $comment.hide();
                            }
                            if (rev?.shortRevisionNo != null) {
                                const $expandableRevision = $expandableRevisionTemplate.clone();
                                $expandableRevision.filter(".expandable").text(rev.shortRevisionNo)
                                $expandableRevision.filter(".hidden").text(rev.revisionNo)
                                $revisionRow.find("[attr=revision-id]").append($expandableRevision)
                            } else {
                                $revisionRow.find("[attr=revision-id]").text(rev.revisionNo);
                            }
                            const $openRevisionLink = $revisionRow.find("[attr=open-revision]")
                            if (rev.deleted || !canOpenVersions) {
                                const $parentElem = $openRevisionLink.parent();
                                $openRevisionLink.remove()
                                if (!canOpenVersions) {
                                    $parentElem.remove()
                                }
                            } else {
                                $openRevisionLink.attr("title", "Open Revision '" + rev.author.displayName + ": " + formatDateTime(rev.createdAt) + "'")
                                    .click(() => {
                                        if (backToPropsTab()) {
                                            openProjectVersion(rev.revisionNo);
                                        }
                                    });
                            }
                            if (rev.technicalRevision) {
                                $revisionRow.addClass("tech-rev")
                            }
                            $j('#project-revisions>section').append($revisionRow);
                        });
                        if (!canOpenVersions) {
                            $j('#project-revisions>section>header>.actions').hide();
                        } else {
                            $j('#project-revisions>section>header>.actions').show();
                        }
                        if (onSuccess) {
                            onSuccess(data);
                        }
                    }).fail(function (data) {
                        handleError(data.status);
                    }).always(initExpandableLinks);
                };

                return {
                    render: function (projectData) {
                        $searchInput.unbind("change");
                        $fullLogInput.unbind("change");
                        if (projectData.type === "deployment") {
                            $j('#project-revisions>section>header>.comments').hide();
                        }

                        const repoFeatures = function () {
                            let result = {};
                            let targetUrl = "#{contextPath}/web";
                            if (projectData.type === "project") {
                                targetUrl += "/repos/" + projectData.repoName + "/features";
                            } else {
                                targetUrl += "/deploy-config-repo/features";
                            }
                            $j.ajax({
                                type: "GET",
                                url: targetUrl,
                                datatype: "json",
                                async: false,
                            }).done(function (data) {
                                result = data;
                            });
                            return result;
                        }();
                        const pagination = {
                            page: 0
                        };
                        if (repoFeatures.searchable && projectData.type === "project") {
                            $searchForm.show();
                            const searchCallback = () => {
                                pagination.page = 0;
                                $j('#project-revisions>section>div.table-row').slice(1).remove();
                                fetchMoreData(projectData, repoFeatures, pagination, loadMoreHandler);
                            }
                            $searchInput.on("change", searchCallback);
                            $fullLogInput.on("change", searchCallback);
                        } else {
                            $searchForm.hide();
                        }
                        const loadMoreHandler = (response) => {
                            const tableWidth = $j('#project-revisions>section').width();
                            $searchForm.css({
                                "width": tableWidth + "px"
                            })
                            $searchInput.css({
                                "width": (tableWidth - $fullLogInput.parent().width() - 11) + "px"
                            });
                            $loadMoreBtn.unbind(LOAD_MORE_EVENT);
                            $loadMoreBtn.hide();
                            $j('#project-revisions .noEntries').hide();
                            if (response.pageSize === response.numberOfElements && repoFeatures.searchable) {
                                $loadMoreBtn.bind(LOAD_MORE_EVENT, () => {
                                    pagination.page++;
                                    fetchMoreData(projectData, repoFeatures, pagination, loadMoreHandler);
                                });
                                $loadMoreBtn.css({
                                    "display":"table",
                                    "width": tableWidth + "px"
                                });
                            }
                            if ($j('#project-revisions>section>div.table-row').slice(1).size() === 0) {
                                $j('#project-revisions .noEntries').show();
                            }
                        };
                        $j('#project-revisions>section>div.table-row').slice(1).remove();
                        fetchMoreData(projectData, repoFeatures, pagination, loadMoreHandler);
                    }
                }
            }();

            if (type === "project" || type === "deployment") {
                revisionTableHandler.render({
                    type: type,
                    repoName: repoName,
                    name: projectName,
                    branch: branch,
                    canOpenVersions: canOpenOtherVersion
                });
            }
        }
    //]]></script>

</ui:composition>
