<?xml version="1.0" encoding="UTF-8"?>
<ui:composition
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:a4j="http://richfaces.org/a4j"
        xmlns:rich="http://richfaces.org/rich"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:c="http://java.sun.com/jsp/jstl/core">

    <style>
        .hideHeader {
            display: none;
        }

        .showHeader {
            display: table-cell;
        }

        .nav-panel {
            padding: 9px 9px 7px;
        }
    </style>

    <h:panelGroup layout="block" rendered="#{node.type == 'repository' || node.type == 'group'}">
        <ui:include src="/pages/modules/repository/projects.xhtml"/>
    </h:panelGroup>

    <h:panelGroup layout="block" rendered="#{node.type == 'prodrepository' || node.type == 'proddeployment'}">
        <ui:include src="/pages/modules/repository/projectsProduction.xhtml"/>
    </h:panelGroup>

    <c:set var="deleteMessage" value="Archive project"/>
    <c:set var="deleteBranchMessage" value="Delete Branch"/>
    <c:set var="addFolderMessage" value="Create a new folder in the project"/>
    <c:set var="uploadFileMessage" value="Upload a file to the project folder"/>
    <c:set var="undeleteMessage" value="Restore the project in Repository"/>
    <c:set var="eraseMessage" value="Permanently delete the project from repository"/>
    <c:set var="openMessage" value="Open project for viewing in rules editor"/>
    <c:set var="openVersionMessage" value="Open the latest project revision"/>
    <c:set var="closeMessage" value="Close the project and make it unavailable in Rules editor"/>
    <c:set var="unlockMessage" value="Unlock the project and make it available for editing"/>
    <c:set var="saveMessage"
           value="Save the project changes in Design Repository as a new revision and make it available for editing to other users"/>
    <c:set var="mergeMessage" value="Synchronize updates"/>
    <c:set var="copyMessage"
           value="Create a new project in Design Repository with a different project name but the same content "/>

    <h:panelGroup id="nodeButtons" rendered="#{node.type != 'deployment'}">
        <div class="nav-panel">
            <h:panelGroup rendered="#{node.type == 'file'}">
                <h:commandButton id="updateId" rendered="#{repositoryTreeState.canModify}" value="Update file"
                                 onclick="if (!canOverwriteRevision()) return false; openUpdateFileDialog();return false;"
                                 title="Upload the updated file"/>
                <h:commandButton id="exportId" rendered="#{repositoryTreeState.canExport and node.hasVersions()}"
                                 value="Export file"
                                 onclick="openExportModuleDialog('#{artefact.repository.id}', '#{artefact.project.name}', '#{node.internalArtifactPath.stringValue}');return false;"
                                 title="Export file"/>
                <h:commandButton id="copyId" rendered="#{repositoryTreeState.canCopy}" value="Copy file"
                                 onclick="if (!canOverwriteRevision()) return false; openCopyFileDialog();return false;"
                                 title="Copy file"/>
                <h:commandButton id="deleteFileId" rendered="#{repositoryTreeState.canDeleteNode}" value="Delete"
                                 onclick="if (!canOverwriteRevision()) return false; #{rich:component('modalDeleteNode')}.show();return false;"
                                 title="Delete the file"/>
            </h:panelGroup>

            <h:panelGroup rendered="#{node.type == 'folder'}">
                <h:commandButton id="addFolder1" rendered="#{repositoryTreeState.canAppend}" value="Add Folder"
                                 onclick="if (!canOverwriteRevision()) return false; openNewFolderDialog();return false;"
                                 title="#{addFolderMessage}"/>
                <h:commandButton id="uploadFile1" rendered="#{repositoryTreeState.canAppend}" value="Upload File"
                                 onclick="if (!canOverwriteRevision()) return false; openNewFileDialog();return false;"
                                 title="#{uploadFileMessage}"/>
                <h:commandButton id="deleteFolderId" rendered="#{repositoryTreeState.canDeleteNode}" value="Delete"
                                 onclick="if (!canOverwriteRevision()) return false; #{rich:component('modalDeleteNode')}.show();return false;"
                                 title="Delete the folder"/>
            </h:panelGroup>

            <h:panelGroup rendered="#{node.type == 'project'}">
                <h:panelGroup rendered="#{artefact.deleted}">
                    <h:commandButton id="undeleteId1" rendered="#{repositoryTreeState.canUndelete}" value="Undelete"
                                     onclick="confirmUndeleteProject('#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{undeleteMessage}"/>
                    <h:commandButton id="eraseId1" rendered="#{repositoryTreeState.canErase}" value="Erase"
                                     onclick="confirmEraseProject('#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{eraseMessage}"/>
                </h:panelGroup>

                <h:panelGroup rendered="#{!artefact.deleted}">
                    <h:panelGroup>
                        <h:panelGroup>
                            <h:commandButton id="openId1" rendered="#{repositoryTreeState.canOpen}" value="Open"
                                             title="#{openMessage}" immediate="true"
                                             onclick="openProjectModule.openProjectDialog('#{artefact.repository.id}','#{artefact.name}');return false;"/>
                            <h:commandButton id="openVersionId1" rendered="#{repositoryTreeState.canOpenOtherVersion}"
                                             value="Open Revision"
                                             type="button" onclick="openOpenVersionDialog()"
                                             title="#{openVersionMessage}"/>
                            <ui:remove><!-- We don't need forms validation when we are closing the project. So use immediate="true" to bypass validation --></ui:remove>
                            <h:commandButton id="closeId1" rendered="#{repositoryTreeState.canClose}" value="Close"
                                             title="#{closeMessage}" immediate="true"
                                             onclick="closeProjectModule.openCloseProjectDialog('#{artefact.repository.id}','#{artefact.name}');return false;"/>
                        </h:panelGroup>

                        <h:commandButton id="saveId1"
                                         rendered="#{repositoryTreeState.canSaveProject and !repositoryTreeState.localOnly}"
                                         value="Save" onclick="openSaveDialog('#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{saveMessage}"/>
                        <h:commandButton rendered="#{repositoryTreeState.canMerge}" value="Sync" title="#{mergeMessage}"
                                         onclick="openMergeBranchesDialog('#{artefact.repository.id}', '#{repositoryTreeController.currentNodeRepositoryType}', '#{artefact.name}'); return false;"/>

                        <h:commandButton id="copyId1" rendered="#{copyBean.getCanCopy(artefact)}" value="Copy"
                                         onclick="openCopyProjectDialog('#{artefact.repository.id}', '#{repositoryTreeController.currentNodeRepositoryType}', '#{artefact.name}', function() {location.href = location.href;});return false;"
                                         title="#{copyMessage}"/>
                        <h:commandButton id="deleteId2" rendered="#{repositoryTreeState.canDelete}" value="Delete"
                                         onclick="onShowModalDeleteNode('#{repositoryTreeController.currentNodeRepositoryType}');return false;"
                                         title="#{deleteMessage}"/>
                        <h:commandButton id="deleteBranchId" rendered="#{repositoryTreeState.canDeleteBranch}" value="Delete Branch"
                                         onclick="openDeleteBranchDialog();return false;"
                                         title="#{deleteBranchMessage}"/>

                        <h:commandButton id="unlockId1"
                                         rendered="#{repositoryTreeController.canUnlock and node.data.locked and not node.data.lockedByMe}"
                                         value="Unlock" onclick="openSelectedUnlockDialog('project');return false;"
                                         title="#{unlockMessage}">
                            <f:ajax render="unlockId1"/>
                        </h:commandButton>

                        <h:commandButton id="deployId1" rendered="#{repositoryTreeState.canRedeploy}" value="Deploy"
                                         onclick="openSmartRedeployDialog('#{artefact.repository.id}', '#{artefact.name}'); return false;"
                                         title="Deploy selected deployments with the latest version of this project"/>

                        <h:commandButton id="compareId" rendered="#{repositoryTreeState.canCompare}" value="Compare"
                                         onclick="openCompareWindow(); return false;"
                                         title="Compare tables in Excel file between two project versions"/>
                        <h:panelGroup rendered="#{repositoryTreeState.canAppend}">
                            <h:commandButton id="addFolder2" rendered="#{artefact.openedForEditing}" value="Add Folder"
                                             onclick="if (!canOverwriteRevision()) return false; openNewFolderDialog();return false;"
                                             title="#{addFolderMessage}"/>
                            <h:commandButton id="uploadFile2" rendered="#{artefact.openedForEditing}"
                                             value="Upload File"
                                             onclick="if (!canOverwriteRevision()) return false; openNewFileDialog();return false;"
                                             title="#{uploadFileMessage}"/>
                        </h:panelGroup>
                        <h:commandButton id="exportVersionId" rendered="#{repositoryTreeState.canExport}" value="Export"
                                         onclick="openExportProjectDialog('#{artefact.repository.id}', '#{artefact.name}');return false;"
                                         title="Download the project as a zip archive"/>
                        <a4j:jsFunction name="openCompareWindow" action="#{repositoryDiffController.reset()}"
                                        oncomplete=" window.open('#{contextPath}/faces/pages/modules/repository/compare.xhtml?projectName=#{artefact.name}','compare','width=1240,height=700,screenX=50,screenY=100,resizable=no,scrollbars=yes,status=yes');"/>
                    </h:panelGroup>

                </h:panelGroup>
            </h:panelGroup>
        </div>
    </h:panelGroup>

    <rich:tabPanel id="nodeTabPanel" switchType="client"
                   rendered="#{node.type == 'file' || node.type == 'folder' || node.type == 'project' || node.type == 'prodproject' || node.type == 'prodfolder' || node.type == 'prodfile'}">
        <rich:tab id="properties" name="Properties" header="Properties">
            <h:panelGroup id="propertiesContent">
            <table class="formfields" style="max-width: 500px;">
                <tr>
                    <td class="label">
                        <h:outputText value="File Name:" rendered="#{node.type == 'file' || node.type == 'prodfile' }"/>
                        <h:outputText value="Folder Name:"
                                      rendered="#{node.type == 'folder' || node.type == 'prodfolder' }"/>
                        <h:outputText value="Name:"
                                      rendered="#{node.type == 'project' || node.type == 'prodproject' }"/>
                    </td>
                    <td>
                        <h:outputText value="#{node.name}" style="font-weight: bold"
                                      rendered="#{node.type != 'project' or not node.renamed}"/>
                        <h:outputText value="#{node.logicalName} (#{node.name})"
                                      rendered="#{node.type == 'project' and node.renamed}"/>
                    </td>
                </tr>
                <h:panelGroup rendered="#{node.type == 'project' and repositoryTreeState.supportsBranches}">
                    <tr>
                        <td class="label">
                            <h:outputText value="Branch:"/>
                        </td>
                        <td>
                            <h:selectOneMenu value="#{repositoryTreeController.projectBranch}"
                                             title="#{repositoryTreeController.projectBranch}"
                                             validator="#{repositoryTreeController.validateProjectForBranch}"
                                             id="branchSelector"
                                             onchange="return canOpenOtherBranch(this);">
                                <f:selectItems value="#{repositoryTreeController.projectBranches}"/>
                                <f:ajax event="change" immediate="true"
                                        render="projectTree nodeView :eraseProjectForm"/>
                            </h:selectOneMenu>
                            <input type="button" value="..." title="Manage project branches"
                                   onclick="openEditBranchesDialog('#{artefact.repository.id}', '#{artefact.name}');"
                                   class="button-select"/>
                            <a4j:outputPanel ajaxRendered="true" id="branchSelectorError" style="display: grid;">
                                <h:message for="branchSelector" styleClass="error" style="padding-top: 10px;"/>
                            </a4j:outputPanel>
                        </td>
                    </tr>
                </h:panelGroup>
                <h:panelGroup rendered="#{node.type == 'project' || node.type == 'prodproject' }">
                    <h:panelGroup rendered="#{node.type == 'prodproject' }">
                        <tr>
                            <td class="label">
                                <h:outputText value="Revision in Design Repository:"/>
                            </td>
                            <td>
                                <h:outputText value="#{repositoryTreeController.getBusinessVersion(node)}"/>
                            </td>
                        </tr>
                    </h:panelGroup>
                    <h:panelGroup rendered="#{node.type == 'project' }">
                        <tr>
                            <td class="label">
                                <h:outputText value="Status:"/>
                            </td>
                            <td>
                                <h:outputText value="#{node.status}"/>
                            </td>
                        </tr>
                    </h:panelGroup>
                    <tr>
                        <td class="label">Modified By:</td>
                        <td><h:outputText title="#{node.emailModifiedBy}" value="#{node.modifiedBy}"/></td>
                    </tr>
                    <tr>
                        <td class="label">Modified At:</td>
                        <td>
                            <h:outputText value="#{node.modifiedAt}">
                                <f:convertDateTime type="date"
                                                   pattern="#{environment.getProperty('data.format.datetime')}"/>
                            </h:outputText>
                        </td>
                    </tr>
                    <tr>
                        <td class="label">
                            <h:outputText value="Revision ID:"/>
                        </td>
                        <td>
                            <ui:param name="revisionNo" value="#{artefact.version.versionName}"/>
                            <ui:param name="shortRevisionNo" value="#{artefact.version.shortVersion}"/>

                            <c:choose>
                                <c:when test="#{revisionNo eq shortRevisionNo}">
                                    <h:outputText value="#{revisionNo}"/>
                                </c:when>
                                <c:otherwise>
                                    <h:outputText value="#{shortRevisionNo}" styleClass="expandable"/>
                                    <h:outputText value="#{revisionNo}" styleClass="hidden"/>
                                </c:otherwise>
                            </c:choose>
                        </td>
                    </tr>
                    <ui:fragment rendered="#{node.type == 'project' and not repositoryTreeState.localOnly}">
                        <tr>
                            <td class="label">
                                <h:outputText value="Repository:"/>
                            </td>
                            <td>
                                <h:outputText value="#{artefact.repository.name}"/>
                                <c:if test="#{repositoryTreeController.showFullPath and environment.getProperty('user.mode') != 'single'}">
                                    <ui:param name="fullPath"
                                              value="#{repositoryTreeController.getFullPath(artefact)}"/>
                                    <c:if test="#{not empty fullPath}">
                                        <img style="margin-left: 3px; width: 16px; height: 16px;cursor: pointer;"
                                             src="#{contextPath}/webresource/images/copy.svg"
                                             title="Copy as path" alt="Copy as path"
                                             onclick="copyToClipboard('#{fullPath}')"/>
                                    </c:if>
                                </c:if>
                            </td>
                    </tr>
                    </ui:fragment>
                    <ui:fragment rendered="#{utils.supportsMappedFolders(artefact) }">
                        <tr>
                            <td class="label">
                                <h:outputText value="Path:"/>
                            </td>
                            <td>
                                <h:outputText value="#{artefact.realPath}"/>
                            </td>
                        </tr>
                    </ui:fragment>
                </h:panelGroup>
            </table>
            </h:panelGroup>
            <ui:fragment rendered="#{node.type == 'project'}">
                <ui:include src="/pages/modules/tags/editProjectTagsPanel.xhtml">
                    <ui:param name="node" value="#{node}"/>
                    <ui:param name="canModifyTags" value="#{repositoryTreeState.canModifyTags}"/>
                </ui:include>
            </ui:fragment>
        </rich:tab>
        <ui:remove><!--
         FIXME: because of the bug: https://issues.jboss.org/browse/RF-10961
         "render" attribute cannot be used for rich:tab (NullPointerException will be thrown in some cases).
         As a workaround "disabled" attribute in conjunction with "hideHeader"/"showHeader" styles is used.
    --></ui:remove>
        <c:set var="disableRevisions" value="#{(node.type != 'project' and node.type != 'deployment') or artefact.localOnly}" />
        <rich:tab id="revisions" name="Revisions" header="Revisions"
                  onenter="refreshVersionsContentProject()"
                  disabled="#{disableRevisions}"
                  headerClass="#{disableRevisions ? 'hideHeader' : 'showHeader'}">
            <ui:include src="/pages/modules/repository/node/versions.xhtml"/>
            <a4j:jsFunction name="refreshVersionsContentProject"
                            action="#{repositoryTreeController.forceUpdateVersionsBean}"
                            oncomplete="initializeProjectRevisionTable('#{node.type}', '#{artefact.repository.id}', '#{artefact.mainBusinessName}', '#{repositoryTreeState.supportsBranches ? repositoryTreeController.projectBranch : null}', #{node.type == 'project' and repositoryTreeState.canOpenOtherVersion and !artefact.deleted})"/>

        </rich:tab>
        <ui:remove><!--
         FIXME: because of the bug: https://issues.jboss.org/browse/RF-10961
         "render" attribute cannot be used for rich:tab (NullPointerException will be thrown in some cases).
         As a workaround "disabled" attribute in conjunction with "hideHeader"/"showHeader" styles is used.
    --></ui:remove>
        <rich:tab id="elements" name="Elements" header="Elements"
                  disabled="#{node.type == 'file' or node.type == 'prodfile'}"
                  headerClass="#{node.type == 'file' or node.type == 'prodfile' ? 'hideHeader' : 'showHeader'}">
            <h:panelGroup id="elementsContent">
                <ui:include src="/pages/modules/repository/node/elements.xhtml"/>
            </h:panelGroup>
        </rich:tab>

        <ui:remove><!--
         FIXME: because of the bug: https://issues.jboss.org/browse/RF-10961
         "render" attribute cannot be used for rich:tab (NullPointerException will be thrown in some cases).
         As a workaround "disabled" attribute in conjunction with "hideHeader"/"showHeader" styles is used.
    --></ui:remove>
        <rich:tab id="rulesDeployConfiguration" name="RulesDeployConfiguration" header="Rules Deploy Configuration"
                  onenter="#{repositoryTreeState.canModify and artefact.project.openedForEditing ? '' : 'refreshRulesDeployConfiguration()'}"
                  disabled="#{node.type != 'project'}"
                  headerClass="#{node.type == 'project' ? 'showHeader' : 'hideHeader'}">
            <h:panelGroup id="rulesDeployConfigurationContent">
                <h:panelGroup
                        rendered="#{node.type == 'project' and (artefact.project.openedForEditing or repositoryTreeController.currentProjectSelected)}">
                    <ui:include src="/pages/modules/repository/node/rulesDeployConfiguration.xhtml"/>
                </h:panelGroup>
            </h:panelGroup>
            <a4j:jsFunction name="refreshRulesDeployConfiguration"
                            action="#{repositoryTreeController.selectCurrentProjectForOpen()}"
                            render="rulesDeployConfigurationContent"/>
        </rich:tab>
    </rich:tabPanel>

    <h:panelGroup layout="block" rendered="#{node.type == 'drepository'}">
        <ui:include src="/pages/modules/repository/projectsD.xhtml"/>
    </h:panelGroup>

    <h:panelGroup rendered="#{node.type == 'deployment'}">
        <f:event type="preRenderView" listener="#{deploymentController.onPageLoad()}"/>
        <div class="nav-panel">
            <h:panelGroup rendered="#{artefact.deleted}">
                <h:commandButton id="undeleteId2" rendered="#{repositoryTreeState.canUndelete}" value="Undelete"
                                 onclick="confirmUndeleteProject('#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{undeleteMessage}"/>
                <h:commandButton id="eraseId2" rendered="#{repositoryTreeState.canErase}" value="Erase"
                                 onclick="confirmEraseProject('#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{eraseMessage}"/>
            </h:panelGroup>
            <h:panelGroup rendered="#{not artefact.deleted}">
                <h:commandButton id="openVersionId3" rendered="#{repositoryTreeState.canOpen}" value="Open Revision"
                                 type="button"
                                 onclick="openOpenVersionDialog();" title="Open the specified project revision"/>

                <h:commandButton id="closeId3" rendered="#{repositoryTreeState.canClose}" value="Close"
                                 action="#{deploymentController.close}"
                                 immediate="true"
                                 title="Close Deploy Configuration and make it unavailable for editing"
                                 onclick="if (#{deploymentController.modified}) {#{rich:component('modalCloseDeployConfiguration')}.show();return false;}"/>
                <h:commandButton id="editDeployId" rendered="#{repositoryTreeState.canOpen}" value="Open"
                                 action="#{deploymentController.open}"
                                 immediate="true"
                                 title="Make project available for editing and lock it from editing by other users"/>
                <h:commandButton rendered="#{repositoryTreeState.canSaveDeployment}"
                                 onclick="withCommitInfoRequired('#{studio.currentUsername}', () => '#{repositoryTreeController.currentNodeRepositoryType}' === 'repo-git', () => $j('#saveDeployId').click()); return false;"
                                 value="Save" title="#{saveMessage}"/>
                <h:commandButton id="saveDeployId" styleClass="hidden" action="#{deploymentController.save}"/>
                <h:commandButton id="copyId2" rendered="#{repositoryTreeState.canCreateDeployment}" value="Copy"
                                 onclick="openCopyDeploymentProjectDialog(undefined, '#{repositoryTreeController.currentNodeRepositoryType}');return false;" title="#{copyMessage}"/>
                <h:commandButton id="deleteId3" rendered="#{repositoryTreeState.canDeleteDeployment}" value="Delete"
                                 onclick="onShowModalDeleteNode('#{repositoryTreeController.currentNodeRepositoryType}');return false;"
                                 title="#{deleteMessage}"/>

                <h:commandButton id="unlockId2"
                                 rendered="#{repositoryTreeController.canUnlockDeployment and node.data.locked and not node.data.lockedByMe}"
                                 value="Unlock Deploy Configuration"
                                 onclick="openSelectedUnlockDialog('deployment');return false;"
                                 title="#{unlockMessage}">
                    <f:ajax render="unlockId2"/>
                </h:commandButton>
                <h:commandButton id="deployId" rendered="#{deploymentController.canDeploy}" value="Deploy"
                                 onclick="openSelectRepositoryDialog();return false;"
                                 title="Deploy into operations or staging"/>
            </h:panelGroup>
        </div>

        <rich:tabPanel switchType="client">
            <rich:tab header="Properties">
                <ui:include src="node/deployment.xhtml"/>
            </rich:tab>
            <rich:tab header="Revisions" onenter="refreshVersionsContentDeployConfig()">
                <ui:include src="/pages/modules/repository/node/versions.xhtml"/>
                <a4j:jsFunction name="refreshVersionsContentDeployConfig"
                                action="#{repositoryTreeController.forceUpdateVersionsBean}"
                                oncomplete="initializeProjectRevisionTable('#{node.type}', '#{artefact.repository.id}', '#{artefact.name}', '#{repositoryTreeState.supportsBranches ? repositoryTreeController.projectBranch : null}', #{node.type == 'project' and repositoryTreeState.canOpenOtherVersion and !artefact.deleted})"/>
            </rich:tab>
            <rich:tab header="Projects to Deploy">
                <ui:include src="/pages/modules/repository/node/descriptors.xhtml"/>
            </rich:tab>
        </rich:tabPanel>
    </h:panelGroup>
    <script>
        //<![CDATA[
        var $selectedBranch;

        $j(function () {
            // If project is closed, open first tab
            if (#{not artefact.project.openedForEditing}) {
                var $nodeTabPanel = RichFaces.$("nodeTabPanel");
                $nodeTabPanel && $nodeTabPanel.switchToItem("@first");
            }

            $selectedBranch = $j('#branchSelector option:selected');

            initExpandableLinks();

            //hide action column if no child elements there
            if ($j(".filtered-table > tbody > tr > .action-col > *").length === 0) {
                $j(".filtered-table > thead > tr > .action-col").hide();
                $j(".filtered-table > tbody > tr > .action-col").hide();
            }
        });

        function canOverwriteRevision() {
            var confirmNeeded = #{repositoryTreeState.confirmOverwriteNewerRevision};
            return !confirmNeeded || confirm("#{msg['ws.project.warning.version.old']}");
        }

        function canOpenOtherBranch(branchSelector) {
            var confirmNeeded = #{node.type == 'project' and artefact.project.opened and artefact.project.status == 'EDITING'};
            if (!confirmNeeded) {
                return true;
            }

            if (confirm("#{msg['ws.project.warning.other.branch']}")) {
                $selectedBranch = $j(branchSelector).find("option:selected");
                return true;
            } else {
                $selectedBranch.prop("selected", true);
                return false;
            }
        }

        $j(() => {
            // Reinitialize filters state when nodeView is re-rendered.
            reInitRepoFilter();
        });

        //]]>
    </script>

</ui:composition>
