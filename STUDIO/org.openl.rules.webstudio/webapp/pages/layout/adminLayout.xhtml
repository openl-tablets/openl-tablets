<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:a4j="http://richfaces.org/a4j">

    <c:set var="contextPath" value="#{facesContext.externalContext.request.contextPath}" />

    <h:head>
        <!-- Need to call OpenL Studio initialization.
         Workaround for logout when changing settings in the admin section. OpenL Studio is not initialized after login-->
        #{mainBean.init}

        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />

        <link rel="icon" href="#{contextPath}/favicon.ico?v=studio" sizes="48x48" />
        <link rel="icon" href="#{contextPath}/favicon.svg?v=studio" sizes="any" type="image/svg+xml"/>
        <link rel="apple-touch-icon" href="#{contextPath}/icons/apple-touch-icon.png?v=studio"/>
        <link rel="manifest" href="#{contextPath}/icons/site.webmanifest?v=studio" />

        <link href="#{contextPath}/css/bootstrap.min.css" rel="stylesheet" />
        <link href="#{contextPath}/css/common.css?10" rel="stylesheet" />
        <link href="#{contextPath}/css/layout/main.css" rel="stylesheet" />

        <script src="#{contextPath}/javascript/vendor/jquery-3.7.1.min.js"></script>
        <script src="#{contextPath}/javascript/vendor/jquery-migrate-3.4.1.min.js"></script>
        <script src="#{contextPath}/javascript/vendor/jquery-back-compat.js"></script>
        <script src="#{contextPath}/javascript/vendor/jquery.are-you-sure.js"></script>
        <script src="#{contextPath}/javascript/vendor/bootstrap.min.js"></script>
        <script src="#{contextPath}/javascript/common.js?12"></script>   <!-- increment parameter when js file is changed to force browser to reload cached file -->
        <h:outputScript name="faces.js" library="jakarta.faces" />

        <script src="#{contextPath}/javascript/vendor/jquery.easytabs.js"></script>

        <style>
            #header {
                border-bottom: 1px solid #f3f3f3;
            }
            #center {
                height: calc(100% - 83px);
            }

            #content .rf-tab-lbl {
                font-size: 110% !important;
                color: #333;
            }
            #content .rf-tab-cnt {
                padding: 0 !important;
            }
            #content .rf-tab-hdr {
                padding: 3px 5px 3px !important;
                border-right: 0 !important;
                min-width: 96px;
                border-bottom-color: #ddd !important;
            }
            #content .rf-tab-hdr-act {
                border-bottom-color: #bbb !important;
            }
            #content .rf-tab-hdr-spcr {
                border-bottom: 1px solid #ddd !important;
            }

            .tab-panel-vertical {
                border-top: 0;
                margin: 0;
                min-height: 280px;
            }

            .tab-panel-vertical > ul {
                height: calc(100vh - 84px);
                min-height: 440px;
                position: sticky;
                top: 0;
                /* alternative, if sticky is not supported so good.
                position: absolute;
                top: 48px; */
            }

            .tab-panel-vertical > ul li {
                width: 80px;
                font-family: Arial, Verdana, sans-serif;
                font-size: 11px;
            }

            .tab-panel-vertical > ul li a {
                padding: 10px 5px;
            }

            .messages {
                top: 7px;
            }

            .repo-tab {
                display: inline-flex;
                min-height: inherit;
            }

            .tab-panel-vertical.repo-tab ul {
                height: inherit;
                min-height: inherit;
                padding-bottom: 5px;
            }
        </style>

        <script>
          //<![CDATA[
            var $j = $.noConflict();

            var loadingPanel;

            // Handle JSF / Richfaces AJAX errors
            faces.ajax.addOnError(function (data) {
                if (typeof console != "undefined") console.error(data);

                // @Deprecated
                if (data.errorName && data.errorName.indexOf("ViewExpiredException") > -1) {
                    location.reload();
                } else {
                    handleError(data.responseCode);
                }
            });

            function handleError(code) {
                if (code == 399) { // Session Timeout
                    location.href = "#{contextPath}/faces/pages/sessionExpired.xhtml";
                } else if (code == 404) { // File Not Found
                    message("#{msg['ws.common.error.404']}", 7000);
                } else {
                    message("#{msg['ws.common.error.500']}", 7000);
                }
            }

          const ajaxFormHandler = function () {

              const serializeJSON = function($form, exclude) {
                  exclude || (exclude = []);
                  return $form.serializeArray().reduce(function (hash, pair) {
                      pair.value && !(pair.name in exclude) && (hash[pair.name] = pair.value);
                      return hash;
                  }, {});
              };

              const submitDefaults = Object.freeze({
                  methodURL: undefined,
                  methodType: "POST",
                  dataType: "form",
                  $form: undefined,
                  serializeJSON: serializeJSON,
                  onSuccess: () => {},
                  onFail: () => {}
              });

              const fetchDefaults = Object.freeze({
                  methodURL: undefined,
                  methodType: "GET",
                  dataType: "json",
                  $form: undefined,
                  onSuccess: () => {},
                  onFail: () => {}
              });


              const fieldSelector = function(fieldName) {
                  return "input[name='" + fieldName + "']";
              }

              const fieldErrorSelector = function(fieldName) {
                  return fieldSelector(fieldName) + " + span.error";
              }

              const cleanUpForm = function($form) {
                  $form.find("span.error").each(function () {
                      $j(this).text("");
                  });
              }

              return {
                  fetchFormData(options) {
                      options = $j.extend({}, fetchDefaults, options);

                      const $targetForm = options.$form;
                      if ($targetForm == null) {
                          throw new Error("Form must be defined.");
                      }
                      if (options.methodURL == null) {
                          throw new Error("Method URL must be defined.");
                      }
                      cleanUpForm($targetForm);
                      $j.ajax({
                          url: options.methodURL,
                          datatype: options.dataType
                      }).done(function (data) {
                          $j.each(data, function (name, item) {
                              const field = $targetForm.find(fieldSelector(name));
                              if (field.length > 0) {
                                  field.val(item);
                              }
                          });
                          options.onSuccess(data);
                      }).fail(function (data) {
                          ws.ui.error("#{msg['ws.common.error.500']}");
                          options.onFail(data);
                      });
                  },
                  registerSubmitFormHandler(options) {
                      options = $j.extend({}, submitDefaults, options);
                      const $targetForm = options.$form;
                      if ($targetForm == null) {
                          throw new Error("Form must be defined.");
                      }
                      if (options.methodURL == null) {
                          throw new Error("Method URL must be defined.");
                      }
                      if (options.methodType == null) {
                          throw new Error("Method Type must be defined.");
                      }

                      $targetForm.on("submit", function (e) {
                          e.preventDefault();
                          let requestData = options.serializeJSON($targetForm);
                          let ajaxSettings = {
                              type: options.methodType,
                              url: options.methodURL,
                              beforeSend: showLoader
                          }
                          if (options.dataType === "json") {
                              ajaxSettings = $j.extend({}, ajaxSettings, {
                                  contentType: 'application/json',
                                  data: JSON.stringify(requestData),
                              });
                          } else {
                              ajaxSettings = $j.extend({}, ajaxSettings, {
                                  data: $form.serialize(),
                              });
                          }
                          $j.ajax(ajaxSettings).done(function (data) {
                              cleanUpForm($targetForm);
                              options.onSuccess(data);
                          }).fail(function (data) {
                              if (data.status === 399) { // Session Timeout
                                  location.href = "#{contextPath}/faces/pages/sessionExpired.xhtml";
                                  return;
                              } else if (data.readyState === 4) {
                                  let json = (function (rawJson) {
                                      try {
                                          return JSON.parse(rawJson);
                                      } catch (e) {
                                          return null;
                                      }
                                  })(data.responseText);
                                  if (json?.fields != null && json.fields.length > 0) {
                                      json.fields.forEach(item => {
                                          const error = $targetForm.find(fieldErrorSelector(item.field));
                                          if (error.length > 0) {
                                              error.text(item.message);
                                          }
                                      });
                                  } else if (json?.message != null) {
                                      ws.ui.error(ws.utils.escapeHtml(json.message));
                                  } else {
                                      ws.ui.error("#{msg['ws.common.error.500']}");
                                  }
                              } else {
                                  ws.ui.error("#{msg['ws.common.error.500']}");
                              }
                              options.onFail(data);
                          }).always(hideLoader);
                      });
                  }
              }
          }();

          const autocompleteHandler = function () {

              const defaultOptions = Object.freeze({
                  $input: null,
                  minLength: 3,
                  delay: null,
                  source: (request, response) => {}
              });

              const closeAllLists =  () => {
                  $j(".autocomplete-items").remove();
              };

              const removeActive = ($items) => {
                  /*a function to remove the "active" class from all autocomplete items:*/
                  $items.each((i, target) => {
                      $j(target).removeClass("autocomplete-active");
                  });
              }

              return {
                  autocomplete: function (options) {
                      options = $j.extend({}, defaultOptions, options);
                      const $input = options.$input;
                      if ($input == null) {
                          throw new Error("Input must be defined.");
                      }
                      $input.attr("autocomplete", "off");
                      let currentFocus;
                      $input.unbind("input.autocomplete");
                      // Execute a function when someone writes in the text field:
                      const onInputChanged = () => {
                          const val = $input.val();
                          // Close any already open lists of autocompleted values
                          closeAllLists();
                          if (!val || val.length < options.minLength) {
                              return false;
                          }
                          currentFocus = -1;
                          // Create a DIV element that will contain the items (values):
                          const $list = $j("<div>");
                          $list.addClass("autocomplete-items")
                              .attr("id", $input.attr("id") + "_autocomplete-list");
                          $input.after($list);

                          $list.css({
                              "top": $input.outerHeight(true) + $input.position().top,
                              "left": $input.position().left,
                              "width": $input.outerWidth() - 2
                          });

                          $list.hover(() => {
                          }, () => {
                              // on mouse leave
                              currentFocus = -1;
                              const $items = $j("#" + $input.attr("id") + "_autocomplete-list>div");
                              removeActive($items);
                          });

                          const callback = function (items) {
                              items = items || [];
                              items.forEach((item, i) => {
                                  const $item = $j("<div>");
                                  $item.text(item.value);
                                  $item.click(() => {
                                      $input.val(item.value);
                                      // Close the list of autocompleted values, (or any other open lists of autocompleted values:
                                      closeAllLists();
                                  });
                                  $item.hover(() => {
                                      // on mouseEnter
                                      currentFocus = i;
                                      const $items = $j("#" + $input.attr("id") + "_autocomplete-list>div");
                                      addActive($items);
                                  });
                                  $list.append($item);
                              });
                          };
                          options.source({term: val}, callback);
                      };

                      let delayedInputOnChange = null;
                      $input.bind("input.autocomplete", function () {
                          if (options.delay == null || options.delay < 1) {
                              onInputChanged(); // Run immediately
                          } else {
                              // Wrap delayed run
                              if (delayedInputOnChange) {
                                  clearTimeout(delayedInputOnChange); // Stop previous delayed run
                              }
                              delayedInputOnChange = setTimeout(onInputChanged, options.delay); // Wait a bit!
                          }
                      });

                      $input.unbind("keydown.autocomplete");
                      // Execute a function presses a key on the keyboard.
                      $input.bind("keydown.autocomplete", function (e) {
                          const $items = $j("#" + $input.attr("id") + "_autocomplete-list>div");
                          if (e.keyCode === 40) {
                              /* If the arrow DOWN key is pressed,
                              increase the currentFocus variable:*/
                              currentFocus++;
                              /* and make the current item more visible:*/
                              addActive($items);
                          } else if (e.keyCode === 38) { //up
                              /* If the arrow UP key is pressed,
                              decrease the currentFocus variable:*/
                              currentFocus--;
                              /* and make the current item more visible:*/
                              addActive($items);
                          } else if (e.keyCode === 13) {
                              /* If the ENTER key is pressed, prevent the form from being submitted,*/
                              e.preventDefault();
                              if (currentFocus > -1) {
                                  /* and simulate a click on the "active" item:*/
                                  if ($items) {
                                      $j($items[currentFocus]).click();
                                  }
                              }
                          }
                      });

                      const addActive = ($items) => {
                          /*a function to classify an item as "active":*/
                          if (!$items) {
                              return false;
                          }
                          /*start by removing the "active" class on all items:*/
                          removeActive($items);
                          if (currentFocus >= $items.length) {
                              currentFocus = 0;
                          }
                          if (currentFocus < 0) {
                              currentFocus = ($items.length - 1);
                          }
                          /*add class "autocomplete-active":*/
                          $j($items[currentFocus]).addClass("autocomplete-active");
                      }

                      $j(document).unbind("click.autocomplete");
                      $j(document).bind("click.autocomplete", function () {
                          closeAllLists();
                      });
                  }
              }

          }();

            var ws = {
                ui: {
                    loaderOpened: 0,
                    success: function(content) {
                        message(content, 4000, true, "success");
                    },
                    error: function(content) {
                        message(content, -1, true, "error");
                    },
                    info: function(content) {
                        message(content, 8000, true);
                    }
                },
                form: {
                    registerSubmitFormHandler: function (options) {
                        ajaxFormHandler.registerSubmitFormHandler(options)
                    },
                    fetchFormData: function (options) {
                        ajaxFormHandler.fetchFormData(options)
                    },
                    autocomplete: function (options) {
                        autocompleteHandler.autocomplete(options)
                    }
                },
                utils: {
                    escapeHtml: function (string) {
                        return $j('<div/>').text(string).html();
                    }
                }
            };

            $j(function () {
                loadingPanel = $j("#loadingPanel");

                $j("body").css({"visibility": "visible"});
            });

            function showLoader() {
                if (ws.ui.loaderOpened++ === 0) {
                    showAnimatedPanel(loadingPanel);
                }
            }

            function hideLoader() {
                if (ws.ui.loaderOpened-- === 1) {
                    loadingPanel.hide();
                }
                if (ws.ui.loaderOpened < 0) {
                    ws.ui.loaderOpened = 0;
                    console.warn('hideLoader() without showLoader() is called.');
                }
            }

          $j(function () {
              fixRichFaces();
          });

            //]]>
        </script>

        <title>OpenL Studio</title>
    </h:head>

    <h:body style="visibility: hidden">
        <div id="header">
            <ui:insert name="header">
                <ui:include src="/pages/common/header.xhtml">
                    <ui:param name="menu" value="admin" />
                </ui:include>
            </ui:insert>
        </div>
        <div id="center">
            <a4j:outputPanel ajaxRendered="true">
                <h:panelGroup styleClass="messages" layout="block"
                    rendered="#{systemSettingsBean.hasMessages}">
                    <h:messages infoClass="success" errorClass="error" showDetail="true"
                        showSummary="false" tooltip="true" globalOnly="true" />
                </h:panelGroup>
            </a4j:outputPanel>
            <div id="content">
                <div>
                    <ui:insert name="content" />
                </div>
            </div>
        </div>
        <div id="footer">
            <ui:insert name="footer">
                <ui:include src="/pages/common/footer.xhtml" />
            </ui:insert>
        </div>

        <div id="loadingPanel" style="display: none">
            <img src="#{contextPath}/webresource/images/ajax-loader.gif" />
        </div>

        <div style="display: none">
            <a4j:status onstart="showLoader()" onstop="hideLoader()" />
         </div>
    </h:body>
</html>
