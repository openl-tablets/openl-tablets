<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="common-authentication.xml"/>
    <import resource="authorization.xml"/>

    <!-- Scan for auto-wiring classes in spring oauth2 packages -->
    <context:component-scan base-package="org.springframework.security.oauth2"/>

    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <property name="requestRejectedHandler" ref="requestRejectedHandler"/>
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/favicon.ico" filters="none"/>
            <security:filter-chain pattern="/favicon.svg" filters="none"/>
            <security:filter-chain pattern="/css/**" filters="none"/>
            <security:filter-chain pattern="/icons/**" filters="none"/>
            <security:filter-chain pattern="/images/**" filters="none"/>
            <security:filter-chain pattern="/javascript/**" filters="none"/>
            <security:filter-chain pattern="/faces/javax.faces.resource/**" filters="none"/>
            <security:filter-chain pattern="/faces/rfRes/**" filters="none"/>
            <security:filter-chain pattern="/org.richfaces.resources/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/css/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/img/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/js/**" filters="none"/>
            <security:filter-chain pattern="/faces/pages/public/**" filters="none"/>
            <security:filter-chain pattern="/web/public/**" filters="none"/>
            <security:filter-chain pattern="/rest/api-docs" filters="none"/>
            <security:filter-chain pattern="/rest/openapi.json" filters="none"/>
            <security:filter-chain pattern="/logout"
                                   filters="securityContextPersistenceFilter,logoutFilter"/>
            <security:filter-chain pattern="/login/oauth2/code/**"
                                   filters="securityContextPersistenceFilter,oauth2Filter"/>
            <security:filter-chain pattern="/oauth2/authorization/**"
                                   filters="securityContextPersistenceFilter,oauth2RedirectFilter"/>
            <security:filter-chain pattern="/rest/**"
                                   filters="securityContextPersistenceFilter,bearerTokenAuthenticationFilter,bearerExceptionTranslationFilter,filterSecurityInterceptor"/>
            <security:filter-chain pattern="/**"
                                   filters="securityContextPersistenceFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
        </security:filter-chain-map>
    </bean>

    <!-- ============================ Define needed beans for dependencies ====================================== -->

    <util:list id="authenticationProviders">
        <ref bean="authenticationProviderWrapper"/>
        <ref bean="oauth2AccessTokenAuthenticationProviderWrapper"/>
    </util:list>

    <bean id="canCreateInternalUsers" class="java.lang.Boolean">
        <constructor-arg type="boolean" value="false"/>
    </bean>

    <bean id="loginUrl" class="java.lang.String">
        <constructor-arg value="/oauth2/authorization/webstudio"/>
    </bean>

    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" ref="loginUrl"/>
    </bean>

    <!-- ======================== Logout ========================== -->

    <bean id="logoutUrl" class="java.lang.String">
        <constructor-arg value="/logout"/>
    </bean>

    <bean id="logoutSuccessUrl" class="java.lang.String">
        <constructor-arg value="/"/>
    </bean>

    <util:list id="logoutHandlers">
        <bean class="org.openl.security.oauth2.Oauth2LogoutSuccessHandler">
            <constructor-arg name="clientRegistrationRepository" ref="registrationRepository"/>
        </bean>
    </util:list>

    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg name="logoutSuccessUrl" ref="logoutSuccessUrl"/>
        <constructor-arg name="handlers" ref="logoutHandlers"/>
        <property name="filterProcessesUrl" ref="logoutUrl"/>
    </bean>

    <!-- ============================== OAuth2 ==================================================================== -->

    <bean id="authenticationProviderWrapper"
          class="org.openl.rules.webstudio.security.OpenLAuthenticationProviderWrapper">
        <constructor-arg name="delegate" ref="oauth2AuthenticationProvider"/>
    </bean>

    <bean id="oauth2AuthenticationProvider"
          class="org.springframework.security.oauth2.client.oidc.authentication.OidcAuthorizationCodeAuthenticationProvider">
        <constructor-arg name="accessTokenResponseClient">
            <bean class="org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient"/>
        </constructor-arg>
        <constructor-arg name="userService">
            <bean class="org.openl.security.oauth2.OpenLOAuth2UserService">
                <constructor-arg name="propertyResolver" ref="environment"/>
                <constructor-arg name="userInfoClaimsConverter" ref="userInfoClaimsConverter"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="registrationRepository"
          class="org.openl.security.oauth2.LazyClientRegistrationRepository">
        <constructor-arg name="propertyResolver" ref="environment"/>
    </bean>

    <bean id="oauth2RedirectFilter"
          class="org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter">
        <constructor-arg name="clientRegistrationRepository" ref="registrationRepository"/>
    </bean>

    <bean id="oauth2Filter"
          class="org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter">
        <constructor-arg name="clientRegistrationRepository" ref="registrationRepository"/>
        <constructor-arg name="authorizedClientService">
            <bean class="org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService">
                <constructor-arg name="clientRegistrationRepository" ref="registrationRepository"/>
            </bean>
        </constructor-arg>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
    </bean>

    <!-- ============================ OAuth2 Access Token Configuration for Rest API ============================ -->
    <bean id="oauth2Configuration" class="org.openl.security.oauth2.OAuth2Configuration">
        <constructor-arg name="issuer" value="#{environment.getProperty('security.oauth2.issuer-uri')}"/>
    </bean>

    <bean id="auth2Configuration" class="org.openl.security.oauth2.config.OAuth2AccessTokenConfiguration"/>

    <bean id="oauth2AccessTokenAuthenticationProviderWrapper"
          class="org.openl.rules.webstudio.security.OpenLAuthenticationProviderWrapper">
        <constructor-arg name="delegate"
                         ref="#{T(org.openl.security.oauth2.config.OAuth2AccessTokenConfiguration).AUTH_PROVIDER_BEAN_NAME}"/>
    </bean>
</beans>
