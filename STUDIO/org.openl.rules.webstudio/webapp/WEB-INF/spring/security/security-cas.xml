<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="common-authentication.xml"/>
    <import resource="authorization.xml"/>
    <import resource="db-services.xml"/>

    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <property name="requestRejectedHandler" ref="requestRejectedHandler"/>
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/favicon.ico" filters="none"/>
            <security:filter-chain pattern="/favicon.svg" filters="none"/>
            <security:filter-chain pattern="/css/**" filters="none"/>
            <security:filter-chain pattern="/icons/**" filters="none"/>
            <security:filter-chain pattern="/images/**" filters="none"/>
            <security:filter-chain pattern="/javascript/**" filters="none"/>
            <security:filter-chain pattern="/faces/jakarta.faces.resource/**" filters="none"/>
            <security:filter-chain pattern="/faces/rfRes/**" filters="none"/>
            <security:filter-chain pattern="/org.richfaces.resources/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/css/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/img/**" filters="none"/>
            <security:filter-chain pattern="/faces/tableEditor/js/**" filters="none"/>
            <security:filter-chain pattern="/faces/pages/public/**" filters="none"/>
            <security:filter-chain pattern="/web/public/**" filters="none"/>
            <security:filter-chain pattern="/rest/api-docs/**" filters="none"/>
            <security:filter-chain pattern="/**"
                                   filters="securityContextPersistenceFilter,logoutFilter,singleLogoutFilter,casFilter,exceptionTranslationFilter,filterSecurityInterceptor"/>
        </security:filter-chain-map>
    </bean>

    <!-- ============================ Define needed beans for dependencies ====================================== -->
    <util:list id="authenticationProviders">
        <ref bean="authenticationProviderWrapper"/>
    </util:list>

    <bean id="canCreateInternalUsers" class="java.lang.Boolean">
        <constructor-arg type="boolean" value="false"/>
    </bean>

    <!-- ======================== Logout ========================== -->

    <bean id="logoutUrl" class="java.lang.String">
        <constructor-arg value="/security_logout"/>
    </bean>
    <!-- Redirect to the CAS Server to signal Single Logout should be performed -->
    <bean id="logoutSuccessUrl" class="java.lang.String">
        <constructor-arg value="#{environment.getProperty('security.cas.cas-server-url-prefix')}/logout"/>
    </bean>

    <util:list id="logoutHandlers">
        <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
    </util:list>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

    <!-- ========================= CAS ============================= -->
    <bean id="casServiceUrl" class="java.lang.String">
        <constructor-arg value="/login/cas"/>
    </bean>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="#{environment.getProperty('security.cas.app-url')}#{casServiceUrl}"/>
        <property name="authenticateAllArtifacts" value="true"/>
    </bean>

    <bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="#{casServiceUrl}"/>
        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
    </bean>

    <bean id="authenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <property name="loginUrl" value="#{environment.getProperty('security.cas.cas-server-url-prefix')}/login"/>
        <property name="serviceProperties" ref="serviceProperties"/>
    </bean>

    <bean id="casAuthenticationProvider"
          class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <property name="serviceProperties" ref="serviceProperties"/>
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg name="casServerUrlPrefix"
                                 value="#{environment.getProperty('security.cas.cas-server-ticket-validator-prefix')}"/>
                <property name="encoding" value="UTF-8"/>
            </bean>
        </property>
        <property name="authenticationUserDetailsService">
            <bean class="org.openl.security.cas.CASAttributesToOpenLUserDetailsService">
                <constructor-arg name="propertyResolver" ref="environment"/>
                <constructor-arg name="syncUserData" ref="syncUserData"/>
                <constructor-arg name="privilegeMapper" ref="privilegeMapper"/>
            </bean>
        </property>
        <property name="key" value="OpenLCasAuthenticationProviderKey"/>
    </bean>

    <bean id="authenticationProviderWrapper"
          class="org.openl.rules.webstudio.security.OpenLAuthenticationProviderWrapper">
        <constructor-arg name="delegate" ref="casAuthenticationProvider"/>
    </bean>

</beans>
