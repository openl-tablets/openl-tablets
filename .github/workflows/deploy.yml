# This workflow will build a project with Maven every day (aka Nightly Build)
# and deploys the built docker images to the GitHub Packages.

name: Build GitHub packages

on:
  schedule:
    # Every day at 23:00 UTC+3
    - cron: '0 20 * * *'
  # Manual run from the GitHub action page
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: false

jobs:
  deploy:

    name: Deploy

    permissions:
      packages: write

    runs-on: ubuntu-latest

    steps:

      - name: Configure GIT
        run: |
          git config --global user.name "OpenL Tablets"
          git config --global user.email openltablets@gmail.com
          git config --global core.autocrlf false

      - name: Checkout ${{ github.event.inputs.branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Java and cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'maven'

      - name: Build with Maven
        run: mvn package -T1C -DskipTests "-Dstyle.color=always"

      - name: Get tag
        run: |
          PROPERTIES_FILE="DEV/org.openl.commons/target/classes/org/openl/info/openl.version.properties"
          VERSION=$(grep 'openl.version' "$PROPERTIES_FILE" | cut -d'=' -f2 | xargs)
          COMMIT_HASH=$(grep 'openl.commit.hash' "$PROPERTIES_FILE" | cut -d'=' -f2 | xargs)
          TAG_VERSION=${VERSION/-SNAPSHOT/-$COMMIT_HASH}
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Prepare for multi-platform docker build
        run: |
          echo "BUILD_PLATFORMS=linux/amd64,linux/arm64/v8" >> $GITHUB_ENV
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use

      - name: Build docker images ${{ env.TAG_VERSION }}
        run: |
          echo Platforms: ${BUILD_PLATFORMS}
          repo=ghcr.io/${{ github.repository_owner }}
          created="org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          version="org.opencontainers.image.version=x"
          revision="org.opencontainers.image.revision=${GITHUB_SHA}"
          echo ${{ github.token }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          docker buildx build -t $repo/ws:x -t $repo/ws:${{ env.TAG_VERSION }} . \
            --build-arg APP=WSFrontend/org.openl.rules.ruleservice.ws/target/webapp \
            --platform ${BUILD_PLATFORMS} --push \
            --label $created --label $version --label $revision \
            --label "org.opencontainers.image.title=OpenL RuleServices" \
            --label "org.opencontainers.image.description=A minimal image with OpenL web service to run OpenL rules"
          docker buildx build -t $repo/ws:x-all -t $repo/ws:${{ env.TAG_VERSION }}-all . \
            --build-arg APP=WSFrontend/org.openl.rules.ruleservice.ws.all/target/webapp \
            --platform ${BUILD_PLATFORMS} --push \
            --label $created --label $version --label $revision \
            --label "org.opencontainers.image.title=OpenL RuleServices (All)" \
            --label "org.opencontainers.image.description=An OpenL web service with extra modules"
          docker buildx build -t $repo/webstudio:x -t $repo/webstudio:${{ env.TAG_VERSION }} . \
            --build-arg APP=STUDIO/org.openl.rules.webstudio/target/webapp \
            --platform ${BUILD_PLATFORMS} --push \
            --label $created --label $version --label $revision \
            --label "org.opencontainers.image.title=OpenL Studio" \
            --label "org.opencontainers.image.description=A web application to develop, run, test and trace OpenL rules"
          cd DEMO
          docker buildx build -t $repo/demo:x -t $repo/demo:${{ env.TAG_VERSION }} . \
            --platform ${BUILD_PLATFORMS} --push \
            --label $created --label $version --label $revision

      - name: Summary
        run: |
          echo '`docker run -p 8080:8080 ghcr.io/${{ github.repository_owner }}/webstudio:${{ env.TAG_VERSION }}`' >> $GITHUB_STEP_SUMMARY
          echo '`docker run -p 8080:8080 ghcr.io/${{ github.repository_owner }}/ws:${{ env.TAG_VERSION }}`' >> $GITHUB_STEP_SUMMARY
          echo '`docker run -p 8080:8080 ghcr.io/${{ github.repository_owner }}/ws:${{ env.TAG_VERSION }}-all`' >> $GITHUB_STEP_SUMMARY

      - name: Clean up old versions of RuleServices
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'ws'
          package-type: 'container'
          min-versions-to-keep: 50 # 5 versions * 2 variants * 5 manifests

      - name: Clean up old versions of Studio
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'webstudio'
          package-type: 'container'
          min-versions-to-keep: 25 # 5 versions * 5 manifests

      - name: Clean up old versions of DEMO
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'demo'
          package-type: 'container'
          min-versions-to-keep: 5 # 1 versions * 5 manifests
