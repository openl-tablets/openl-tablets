# This workflow will publish Docker images to the Central Docker Hub repository.

name: DockerHub Publisher

on:
  # Manual run from the GitHub action page
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: false
        default: 'latest'

run-name: Publishing docker images for
  ${{ inputs.version || 'latest' }}

jobs:
  publish:

    name: Publish ${{ github.event.inputs.version }} images to DockerHub

    runs-on: ubuntu-latest

    steps:
      - name: Define settings
        run: |
          echo "JAVA21=21-jre-noble" >> $GITHUB_ENV
          echo "SERVER=https://repo.maven.apache.org/maven2" >> $GITHUB_ENV

      - name: Setup Soft
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libxml2-utils
          gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 902B17732F38021331F3019F82521DFA3BF8F6FC

      - name: Configure GIT
        run: |
          git config --global user.name "OpenL Tablets"
          git config --global user.email openltablets@gmail.com
          git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine the latest version
        run: |
          metaUrl="$SERVER/org/openl/org.openl.core/maven-metadata.xml"
          metaData="$(wget -qO - $metaUrl)"
          latest="$(echo $metaData | xmllint --xpath /metadata/versioning/latest/text\(\) - )"
          version="${{ github.event.inputs.version }}"
          if [ "$version" = "latest" ]; then
            version="$latest"
          fi
          major=$(echo $version | grep -o -E [0-9]+.[0-9]+ | head -n1)
          latestMajor=$(echo $metaData | grep -E $major\.[0-9.]+ -o | sort -V -r | head -n1)
          echo $version
          echo $major
          echo $latest
          echo $latestMajor
          tags_jakarta="-t openltablets/\$appName:$version-jakarta"
          if [ "$latestMajor" = "$version" ]; then
            tags_jakarta+=" -t openltablets/\$appName:$major.x-jakarta"
          fi
          echo "tags_jakarta=$tags_jakarta" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_ENV

      - name: Download Rule Services (Jakarta)
        run: |
          # Define urls
          artifactUrl="$SERVER/org/openl/rules/org.openl.rules.ruleservice.ws"
          downloadUrl="$artifactUrl/$version-jakarta/org.openl.rules.ruleservice.ws-$version-jakarta.war"
          # Download artifact.
          wget --progress=dot:giga -O app.war "$downloadUrl"
          wget --progress=dot:giga -O app.war.asc "$downloadUrl.asc"
          # GPG verification
          gpg --batch --verify app.war.asc app.war
          unzip -q app.war -d webservice-jakarta
          rm app.war.asc
          rm app.war

      - name: Download Rule Services (ALL) (Jakarta)
        run: |
          # Define urls
          artifactUrl="$SERVER/org/openl/rules/org.openl.rules.ruleservice.ws.all"
          downloadUrl="$artifactUrl/$version-jakarta/org.openl.rules.ruleservice.ws.all-$version-jakarta.war"
          # Download artifact.
          wget --progress=dot:giga -O app.war "$downloadUrl"
          wget --progress=dot:giga -O app.war.asc "$downloadUrl.asc"
          # GPG verification
          gpg --batch --verify app.war.asc app.war
          unzip -q app.war -d webservice-all-jakarta
          rm app.war.asc
          rm app.war

      - name: Download OpenTelemetry extension
        run: |
          # Define urls
          artifactUrl="$SERVER/org/openl/rules/openl-rules-opentelemetry"
          downloadUrl="$artifactUrl/$version/openl-rules-opentelemetry-$version.jar"
          # Download artifact.
          wget --progress=dot:giga -O openl-rules-opentelemetry.jar "$downloadUrl"
          wget --progress=dot:giga -O openl-rules-opentelemetry.jar.asc "$downloadUrl.asc"
          # GPG verification
          gpg --batch --verify openl-rules-opentelemetry.jar.asc openl-rules-opentelemetry.jar
          rm openl-rules-opentelemetry.jar.asc

      - name: Prepare for multi-platform docker build
        run: |
          echo "BUILD_PLATFORMS=linux/amd64,linux/arm64/v8" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use
          docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_TOKEN }}

      - name: Push Rule Services (All) (Jakarta)
        run: >
          docker buildx build
          -t openltablets/ws:$version-jakarta-all
          --platform ${BUILD_PLATFORMS} --push
          --build-arg APP=webservice-all-jakarta
          --build-arg OTEL_APP=openl-rules-opentelemetry.jar
          --build-arg JDK=$JAVA21
          --label "org.opencontainers.image.title=OpenL RuleServices (All) (Jakarta)"
          --label "org.opencontainers.image.version=${version}"
          --label "org.opencontainers.image.revision=${GITHUB_SHA}"
          --label "org.opencontainers.image.created=${BUILD_DATE}"
          --label "org.opencontainers.image.description=An OpenL web service with extra modules"
          .

      - name: Push Rule Services (Jakarta)
        env:
          appName: ws
        run: >
          eval docker buildx build
          $tags_jakarta
          --platform ${BUILD_PLATFORMS} --push
          --build-arg APP=webservice-jakarta
          --build-arg OTEL_APP=openl-rules-opentelemetry.jar
          --build-arg JDK=$JAVA21
          --label '"org.opencontainers.image.title=OpenL RuleServices (Jakarta)"'
          --label "org.opencontainers.image.version=${version}"
          --label "org.opencontainers.image.revision=${GITHUB_SHA}"
          --label "org.opencontainers.image.created=${BUILD_DATE}"
          --label '"org.opencontainers.image.description=A minimal image with OpenL web service to run OpenL rules"'
          .
