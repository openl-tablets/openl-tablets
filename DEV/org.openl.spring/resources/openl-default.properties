# OpenL Tablets working directory that stores data for each instance.
openl.home = ${user.home}/.openl

# OpenL Tabletws shared working directory for clustered systems.
# It must match the openl.home property value.
# It points to the shared mount between instances to synchronize the data.
openl.home.shared = ${openl.home}

# A secret key (a master password) for encode/decode values of the properties.
# If this property is not blank then encoded values can be defined inside of ENC(...), like:
# my-property.password=ENC(eNcoDedPa$$w0RD)
secret.key = ${repository.encode.decode.key}
# The algorithm of the encoding is the following:
#
# 1. Make SHA-1 hash of the secret key in UTF-8 encoding;
# 2. Get the first 32 symbols of the SHA-1 as a key;
# 3. Encrypt the value in UTF-8 encoding by AES 128 bit algorithm with CBC mode, PKCS5 padding, zero initialization vector;
# 4. Encode the AES binary into a Base64 string;
# 5. Wrap the Base64 string into ENC(...) without whitespaces inside.
#
# You can use the following linux shell command to create an encoded password:
#
#    echo -n "plain password" \
#      | openssl aes-128-cbc \
#        -K $(echo -n "My $eCr3T" | sha1sum | awk '{ print substr($1, 1, 32) }') \
#        -e \
#        -iv 00000000000000000000000000000000 \
#        -base64 \
#      | awk '{ print "ENC("$1")" }'
#
# where "My $eCr3T" is the value of the secret.key property.
# Note: You can encode any properties, not only passwords.

# Encoding cipher.
secret.cipher = AES/CBC/PKCS5Padding

# Property used for backward compatibility. Use secret.key instead.
repository.encode.decode.key =

##########################################
# Important: Do not override these properties
# in the application level properties files,
# such as application.properties.
# It will not work.
openl.config.location = ${spring.config.location: classpath*:application*-default.properties, classpath:, classpath:config/, file:./, file:conf/, file:config/, file:${user.home}/}
openl.config.name = ${spring.config.name: application.properties, application-{profile}.properties, {appName}.properties, {appName}-{profile}.properties}
##########################################

# To protect against the JNDI injection and unauthorized access to private data.
# RegExp pattern for white and black lists, to restrict access for property keys available for the application.
openl.config.key-pattern.allowed = [\\d\\w.$-]+
openl.config.key-pattern.denied =
