package org.openl.rules.project.instantiation;

import java.util.Collection;
import java.util.Map;

import org.openl.CompiledOpenClass;
import org.openl.classloader.OpenLClassLoader;
import org.openl.rules.project.model.Module;

/**
 * Compiles {@link Module}s and gets {@link CompiledOpenClass} and instance of for execution
 *
 * @author PUdalau, Marat Kamalov
 */
public interface RulesInstantiationStrategy {

    /**
     * Compiles module.
     *
     * @return CompiledOpenClass that represents overall info about module rules.
     * @throws RulesInstantiationException
     */
    CompiledOpenClass compile() throws RulesInstantiationException;

    /**
     * Creates instance of class handling all rules invocations. The class will be an instance of class got with
     * {@link #getInstanceClass()()}.
     *
     * @return instance of {@link #getInstanceClass()} result.
     * @throws RulesInstantiationException
     */
    Object instantiate() throws RulesInstantiationException;

    /**
     * Creates instance of class handling all rules invocations. The class will be an instance of class got with
     * {@link #getInstanceClass()()}.
     *
     * @param ignoreCompilationErrors if true instantiate an instance even if a compilation has errors
     * @return instance of {@link #getInstanceClass()} result.
     * @throws RulesInstantiationException
     */
    Object instantiate(boolean ignoreCompilationErrors) throws RulesInstantiationException;

    /**
     * Returns ClassLoader for the current module inside the project. If classLoader was set during the construction of
     * the strategy - returns it.<br>
     * If no, creates {@link OpenLClassLoader} with project classLoader of current module as parent.
     *
     * @return {@link ClassLoader} that will be used for openl compilation.
     * <p>
     * throws RulesInstantiationException some strategies compile dependencies during classloader build.
     */
    ClassLoader getClassLoader() throws RulesInstantiationException;

    /**
     * Service class of rules can be defined or predefined for some specific instantiations strategies(e.g. for static
     * wrapper case).
     *
     * @return service class that it is used for {@link InstantiationError} or <code>null</code>.
     * @throws RulesInstantiationException
     */
    Class<?> getServiceClass() throws RulesInstantiationException;

    /**
     * Service that will be used for instantiation.
     *
     * @param serviceClass service class.
     */
    void setServiceClass(Class<?> serviceClass);

    /**
     * Recognizes class for instance representing rule. It will be service class or generated by rules class it the
     * first one is not defined.
     *
     * @return class of instance.
     * @throws RulesInstantiationException
     */
    Class<?> getInstanceClass() throws RulesInstantiationException;

    /**
     * Resets instantiation strategy in order to check out all changes in modules.
     */
    void reset();

    /**
     * Forced reset that is improved version of {@link #reset()} with reloading of classloaders.
     */
    void forcedReset();

    /**
     * Some additional options for compilation defined externally(e.g. external dependencies, overridden system
     * properties)
     */
    void setExternalParameters(Map<String, Object> parameters);

}
